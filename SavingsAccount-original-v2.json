{
  "openapi": "3.0.1",
  "info": {
    "title": "Savings Account",
    "description": "This service domain orchestrates a consumer savings account. The typical range of services and fees covers payments from and scheduled and ad-hoc deposits to the account, standing orders, sweeps, and ",
    "contact": {
      "name": "BIAN",
      "url": "https://bian.org"
    },
    "version": "13.0.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/B154/BIAN/SavingsAccount/13.0.0"
    }
  ],
  "paths": {
    "/SavingsAccount/Initiate": {
      "post": {
        "tags": [
          "CR - SavingsAccountFacility"
        ],
        "summary": "InCR Initiate A new savings account",
        "description": "InCR Initiate A new savings account",
        "operationId": "Initiate",
        "requestBody": {
          "$ref": "#/components/requestBodies/SavingsAccountFacility"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SavingsAccountFacility"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Update": {
      "put": {
        "tags": [
          "CR - SavingsAccountFacility"
        ],
        "summary": "UpCR Update details of a savings account",
        "description": "UpCR Update details of a savings account",
        "operationId": "Update",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SavingsAccountFacility"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SavingsAccountFacility"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Control": {
      "put": {
        "tags": [
          "CR - SavingsAccountFacility"
        ],
        "summary": "CoCR Control the processing of an a savings account",
        "description": "CoCR Control the processing of an a savings account",
        "operationId": "Control",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SavingsAccountFacility"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SavingsAccountFacility"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Retrieve": {
      "get": {
        "tags": [
          "CR - SavingsAccountFacility"
        ],
        "summary": "ReCR Retrieve information about a savings account - either standard canned reports or selected instance attribute values",
        "description": "ReCR Retrieve information about a savings account - either standard canned reports or selected instance attribute values",
        "operationId": "Retrieve",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SavingsAccountFacility"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Interest/{interestid}/Retrieve": {
      "get": {
        "tags": [
          "BQ - Interest"
        ],
        "summary": "ReBQ Retrieve details about interest applied to the account",
        "description": "ReBQ Retrieve details about interest applied to the account",
        "operationId": "RetrieveInterest",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/interestid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Interest"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/ServiceFee/Initiate": {
      "post": {
        "tags": [
          "BQ - ServiceFee"
        ],
        "summary": "InBQ Initiate service fees against an account",
        "description": "InBQ Initiate service fees against an account",
        "operationId": "InitiateServiceFee",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceFee"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ServiceFee"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/ServiceFee/{servicefeeid}/Execute": {
      "put": {
        "tags": [
          "BQ - ServiceFee"
        ],
        "summary": "ExBQ Execute Apply Service Fee",
        "description": "ExBQ Execute Apply Service Fee",
        "operationId": "ExecuteServiceFee",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/servicefeeid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceFee"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ServiceFee"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/ServiceFee/{servicefeeid}/Retrieve": {
      "get": {
        "tags": [
          "BQ - ServiceFee"
        ],
        "summary": "ReBQ Retrieve information about a service fee applied to the account",
        "description": "ReBQ Retrieve information about a service fee applied to the account",
        "operationId": "RetrieveServiceFee",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/servicefeeid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ServiceFee"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Sweep/Initiate": {
      "post": {
        "tags": [
          "BQ - Sweep"
        ],
        "summary": "InBQ Set up an account sweep",
        "description": "InBQ Set up an account sweep",
        "operationId": "InitiateSweep",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Sweep"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Sweep"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Sweep/{sweepid}/Update": {
      "put": {
        "tags": [
          "BQ - Sweep"
        ],
        "summary": "UpBQ Update details of an existing account sweep",
        "description": "UpBQ Update details of an existing account sweep",
        "operationId": "UpdateSweep",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/sweepid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Sweep"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Sweep"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Sweep/{sweepid}/Execute": {
      "put": {
        "tags": [
          "BQ - Sweep"
        ],
        "summary": "ExBQ Trigger an account sweep transaction",
        "description": "ExBQ Trigger an account sweep transaction",
        "operationId": "ExecuteSweep",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/sweepid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Sweep"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Sweep"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Sweep/{sweepid}/Retrieve": {
      "get": {
        "tags": [
          "BQ - Sweep"
        ],
        "summary": "ReBQ Retrieve details about a sweep facility or specific sweep transaction",
        "description": "ReBQ Retrieve details about a sweep facility or specific sweep transaction",
        "operationId": "RetrieveSweep",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/sweepid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Sweep"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Withdrawal/Initiate": {
      "post": {
        "tags": [
          "BQ - Withdrawal"
        ],
        "summary": "InBQ Initialize withdrawal transaction",
        "description": "InBQ Initialize withdrawal transaction",
        "operationId": "InitiateWithdrawal",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Withdrawal"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Withdrawal"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Withdrawal/{withdrawalid}/Update": {
      "put": {
        "tags": [
          "BQ - Withdrawal"
        ],
        "summary": "UpBQ Update or correct a withdrawal transaction",
        "description": "UpBQ Update or correct a withdrawal transaction",
        "operationId": "UpdateWithdrawal",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/withdrawalid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Withdrawal"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Withdrawal"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Withdrawal/{withdrawalid}/Execute": {
      "put": {
        "tags": [
          "BQ - Withdrawal"
        ],
        "summary": "ExBQ Execute a withdrawal transaction",
        "description": "ExBQ Execute a withdrawal transaction",
        "operationId": "ExecuteWithdrawal",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/withdrawalid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Withdrawal"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Withdrawal"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Withdrawal/{withdrawalid}/Retrieve": {
      "get": {
        "tags": [
          "BQ - Withdrawal"
        ],
        "summary": "ReBQ Retrieve details about a withdrawal transaction",
        "description": "ReBQ Retrieve details about a withdrawal transaction",
        "operationId": "RetrieveWithdrawal",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/withdrawalid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Withdrawal"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Payment/Initiate": {
      "post": {
        "tags": [
          "BQ - Payment"
        ],
        "summary": "InBQ Initialize a payment transaction (can be single or repeating)",
        "description": "InBQ Initialize a payment transaction (can be single or repeating)",
        "operationId": "InitiatePayment",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Payment"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Payment/{paymentid}/Update": {
      "put": {
        "tags": [
          "BQ - Payment"
        ],
        "summary": "UpBQ Update a payment transaction configuration or specific transaction",
        "description": "UpBQ Update a payment transaction configuration or specific transaction",
        "operationId": "UpdatePayment",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/paymentid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Payment"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Payment/{paymentid}/Exchange": {
      "put": {
        "tags": [
          "BQ - Payment"
        ],
        "summary": "EcBQ Verify/approve a scheduled repeating payment",
        "description": "EcBQ Verify/approve a scheduled repeating payment",
        "operationId": "ExchangePayment",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/paymentid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Payment"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Payment/{paymentid}/Execute": {
      "put": {
        "tags": [
          "BQ - Payment"
        ],
        "summary": "ExBQ Trigger a payment for a repeating payment set up",
        "description": "ExBQ Trigger a payment for a repeating payment set up",
        "operationId": "ExecutePayment",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/paymentid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Payment"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Payment/{paymentid}/Retrieve": {
      "get": {
        "tags": [
          "BQ - Payment"
        ],
        "summary": "ReBQ Retrieve details about a payment transaction or arrangement",
        "description": "ReBQ Retrieve details about a payment transaction or arrangement",
        "operationId": "RetrievePayment",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/paymentid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/IssuedDevice/Initiate": {
      "post": {
        "tags": [
          "BQ - IssuedDevice"
        ],
        "summary": "Initiate Provision of Issued Device",
        "description": "Initiate Provision of Issued Device",
        "operationId": "InitiateIssuedDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/IssuedDevice"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/IssuedDevice"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/IssuedDevice/{issueddeviceid}/Update": {
      "put": {
        "tags": [
          "BQ - IssuedDevice"
        ],
        "summary": "Update Details of Issued Device Allocated to This Account",
        "description": "Update Details of Issued Device Allocated to This Account",
        "operationId": "UpdateIssuedDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/issueddeviceid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/IssuedDevice"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/IssuedDevice"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/IssuedDevice/{issueddeviceid}/Retrieve": {
      "get": {
        "tags": [
          "BQ - IssuedDevice"
        ],
        "summary": "Retrieve Details about Issued Device",
        "description": "Retrieve Details about Issued Device",
        "operationId": "RetrieveIssuedDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/issueddeviceid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IssuedDevice"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Interest/{interestid}/Execute": {
      "put": {
        "tags": [
          "BQ - Interest"
        ],
        "summary": "ExBQ Execute Apply Interest",
        "description": "ExBQ Execute Apply Interest",
        "operationId": "ExecuteInterest",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/interestid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Interest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Interest"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/ServiceFee/{servicefeeid}/Update": {
      "put": {
        "tags": [
          "BQ - ServiceFee"
        ],
        "summary": "Update details about an applied service fee",
        "description": "Update details about an applied service fee",
        "operationId": "UpdateServiceFee",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/servicefeeid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ServiceFee"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ServiceFee"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/BookingAuthorization/{bookingauthorizationid}/Execute": {
      "put": {
        "tags": [
          "BQ - BookingAuthorization"
        ],
        "summary": "Execute authorization of booking",
        "description": "Execute authorization of booking",
        "operationId": "ExecuteBookingAuthorization",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/bookingauthorizationid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BookingAuthorization"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/BookingAuthorization"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/AmountBlock/Initiate": {
      "post": {
        "tags": [
          "BQ - AmountBlock"
        ],
        "summary": "Initiate an amount block",
        "description": "Initiate an amount block",
        "operationId": "InitiateAmountBlock",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AmountBlock"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AmountBlock"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/AmountBlock/{amountblockid}/Retrieve": {
      "get": {
        "tags": [
          "BQ - AmountBlock"
        ],
        "summary": "Retrieve details about an amount block",
        "description": "Retrieve details about an amount block",
        "operationId": "RetrieveAmountBlock",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/amountblockid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AmountBlock"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/AmountBlock/{amountblockid}/Update": {
      "put": {
        "tags": [
          "BQ - AmountBlock"
        ],
        "summary": "Update details of an amount block",
        "description": "Update details of an amount block",
        "operationId": "UpdateAmountBlock",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/amountblockid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AmountBlock"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AmountBlock"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Deposit/Initiate": {
      "post": {
        "tags": [
          "BQ - Deposit"
        ],
        "summary": "InBQ Initialize deposit transaction",
        "description": "InBQ Initialize deposit transaction",
        "operationId": "InitiateDeposit",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Deposit"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Deposit"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Deposit/{depositid}/Update": {
      "put": {
        "tags": [
          "BQ - Deposit"
        ],
        "summary": "UpBQ Update or correct a deposit transaction",
        "description": "UpBQ Update or correct a deposit transaction",
        "operationId": "UpdateDeposit",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/depositid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Deposit"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Deposit"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Deposit/{depositid}/Execute": {
      "put": {
        "tags": [
          "BQ - Deposit"
        ],
        "summary": "ExBQ Execute a deposit transaction",
        "description": "ExBQ Execute a deposit transaction",
        "operationId": "ExecuteDeposit",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/depositid"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Deposit"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Deposit"
          }
        }
      }
    },
    "/SavingsAccount/{savingsaccountid}/Deposit/{depositid}/Retrieve": {
      "get": {
        "tags": [
          "BQ - Deposit"
        ],
        "summary": "ReBQ Retrieve details about a deposit transaction",
        "description": "ReBQ Retrieve details about a deposit transaction",
        "operationId": "RetrieveDeposit",
        "parameters": [
          {
            "$ref": "#/components/parameters/savingsaccountid"
          },
          {
            "$ref": "#/components/parameters/depositid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Deposit"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "value": {
        "type": "object",
        "properties": {
          "Value": {
            "type": "string",
            "description": "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)",
            "format": "datatype"
          }
        },
        "description": "The current calculated limit ||\r\n|"
      },
      "currencycode": {
        "type": "object",
        "properties": {
          "Currencycode": {
            "type": "string",
            "description": "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an internatio",
            "format": "datatype"
          }
        },
        "description": ""
      },
      "text": {
        "type": "object",
        "properties": {
          "Text": {
            "type": "string",
            "description": "Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)",
            "format": "datatype"
          }
        },
        "description": "Decimal point position starts calulating from the right\n"
      },
      "amounttypevalues": {
        "enum": [
          "Principal",
          "Actual",
          "Estimated",
          "Maximum",
          "Default",
          "Replacement",
          "Incremental",
          "Decremental",
          "Reserved",
          "Available",
          "Used",
          "DuePayable",
          "Minimum",
          "Open",
          "Unknown",
          "Fixed"
        ],
        "type": "string",
        "description": ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n"
      },
      "amount": {
        "type": "object",
        "properties": {
          "AmountValue": {
            "$ref": "#/components/schemas/value"
          },
          "AmountCurrency": {
            "$ref": "#/components/schemas/currencycode"
          },
          "DecimalPointPosition": {
            "$ref": "#/components/schemas/text"
          },
          "AmountType": {
            "$ref": "#/components/schemas/amounttypevalues"
          }
        },
        "description": "The deposited amount"
      },
      "deposittypevalues": {
        "enum": [
          "CashDeposit",
          "SecurityDeposit",
          "PawnDeposit",
          "Call/NoticeDeposit",
          "FixedTermDeposit",
          "DemandDeposit",
          "TimeDeposit",
          "CardDeposit"
        ],
        "type": "string",
        "description": ">\r\n* `CashDeposit` - Amount of money representing a value paid by a debtor to an agent bank. (ISO20022)\r\n* `SecurityDeposit` - \r\n* `PawnDeposit` - \r\n* `Call/NoticeDeposit` - \r\n* `FixedTermDeposit` - \r"
      },
      "deposittransaction": {
        "type": "object",
        "properties": {
          "DepositAmount": {
            "$ref": "#/components/schemas/amount"
          }
        },
        "description": "Details of the deposit transaction"
      },
      "date": {
        "type": "object",
        "properties": {
          "DateContent": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": "The date and time the deposit was initiated"
      },
      "Deposit": {
        "type": "object",
        "properties": {
          "DepositTransactionAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "DepositTransactionSourceReference": {
            "type": "string",
            "description": "Identifies the source of the deposit",
            "format": "object"
          },
          "DepositTransactionDescription": {
            "$ref": "#/components/schemas/text"
          },
          "DepositTransactionDepositType": {
            "$ref": "#/components/schemas/deposittypevalues"
          },
          "DepositTransaction": {
            "$ref": "#/components/schemas/deposittransaction"
          },
          "DepositType": {
            "$ref": "#/components/schemas/deposittypevalues"
          },
          "DepositTransactionDate": {
            "$ref": "#/components/schemas/date"
          }
        },
        "description": "The product features/services available with a financical facility"
      },
      "name": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)",
            "format": "datatype"
          }
        },
        "description": "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
      },
      "partytypevalues": {
        "enum": [
          "Person",
          "Organisation"
        ],
        "type": "string",
        "description": ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a"
      },
      "datetimetypevalues": {
        "enum": [
          "MaturityDate",
          "InitiatedDate",
          "RequestedDate",
          "ExecutedDate",
          "OpenDate",
          "CloseDate",
          "ExpiryDate",
          "EffectiveDate",
          "CreatingDate",
          "ActivationDate",
          "DeactivationDate",
          "BlockingDate",
          "SendingDate",
          "ValidFromDate",
          "ValidToDate",
          "ReceivingDate",
          "SigningDate",
          "DueDate",
          "ValueDate",
          "FulfillmentDate"
        ],
        "type": "string",
        "description": ">\r\n* `MaturityDate` - \r\n* `InitiatedDate` - \r\n* `RequestedDate` - \r\n* `ExecutedDate` - \r\n* `OpenDate` - \r\n* `CloseDate` - \r\n* `ExpiryDate` - \r\n* `EffectiveDate` - \r\n* `CreatingDate` - \r\n* `ActivationD"
      },
      "datetime": {
        "type": "object",
        "properties": {
          "DateTimeContent": {
            "$ref": "#/components/schemas/text"
          },
          "TimeZoneCode": {
            "$ref": "#/components/schemas/text"
          },
          "DaylightSavingIndicator": {
            "$ref": "#/components/schemas/text"
          },
          "DateTimeType": {
            "$ref": "#/components/schemas/datetimetypevalues"
          }
        },
        "description": "Value of the date type ISODateTime|ISODateTime (https://www.iso20022.org/standardsrepository/type/ISODateTime)|Standard|ISO20022 BM ()"
      },
      "partyidentificationtypevalues": {
        "enum": [
          "Taxidentificationnumber",
          "Nationalregistrationnumber",
          "Registrationauthorityidentification",
          "LEI(LegalEntityIdentifier)",
          "Alienregistrationnumber",
          "Passportnumber",
          "Taxexemptidentificationnumber",
          "Corporateidentification",
          "Driverlicensenumber",
          "Foreigninvestmentidentitynumber",
          "Socialsecuritynumber",
          "Identitycardnumber",
          "Concat",
          "Nationalregistrationidentificationnumber"
        ],
        "type": "string",
        "description": ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this"
      },
      "partyidentification": {
        "type": "object",
        "properties": {
          "PartyIdentificationType": {
            "$ref": "#/components/schemas/partyidentificationtypevalues"
          },
          "PartyIdentification": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        "description": ""
      },
      "partylegalstructuretypevalues": {
        "enum": [
          "Individual",
          "CommunityInterestCompany",
          "CharitableIncorporatedOrganisation",
          "Co-Operative",
          "Charity",
          "GeneralPartnership",
          "LimitedLiabilityPartnership",
          "ScottishLimitedPartnership",
          "LimitedPartnership",
          "PrivateLimitedCompany",
          "PublicLimitedCompany",
          "Sole(SoleTrader)"
        ],
        "type": "string",
        "description": ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* "
      },
      "party": {
        "type": "object",
        "properties": {
          "PartyName": {
            "$ref": "#/components/schemas/name"
          },
          "PartyType": {
            "$ref": "#/components/schemas/partytypevalues"
          },
          "PartyDateTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "PartyIdentification": {
            "$ref": "#/components/schemas/partyidentification"
          },
          "PartyLegalStructureType": {
            "$ref": "#/components/schemas/partylegalstructuretypevalues"
          }
        },
        "description": "Reference to the associated party Party|Party (https://www.iso20022.org/standardsrepository/type/Party)|Standard|ISO20022BM ()"
      },
      "datetimeperiod": {
        "type": "object",
        "properties": {
          "FromDateTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "ToDateTime": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": ""
      },
      "partyinvolvementtypevalues": {
        "enum": [
          "Agreementinvolvement",
          "Partyinvolvement",
          "Arrangementinvolvement",
          "Designspecificationinvolvement",
          "Relationshipinvolvement",
          "Locationinvolvement",
          "Bankguaranteeinvolvement"
        ],
        "type": "string",
        "description": ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaran"
      },
      "partyrole": {
        "type": "object",
        "properties": {
          "PartyRoleType": {
            "$ref": "#/components/schemas/text"
          },
          "PartyRoleName": {
            "$ref": "#/components/schemas/name"
          },
          "PartyRoleValidityPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "PartyInvolvementType": {
            "$ref": "#/components/schemas/partyinvolvementtypevalues"
          }
        },
        "description": ""
      },
      "involvedparty": {
        "type": "object",
        "properties": {
          "PartyReference": {
            "$ref": "#/components/schemas/party"
          },
          "PartyInvolvement": {
            "$ref": "#/components/schemas/partyrole"
          }
        },
        "description": "Reference to the account primary party/owner ||\r\n|"
      },
      "identifier": {
        "type": "object",
        "properties": {
          "IdentifierValue": {
            "$ref": "#/components/schemas/value"
          },
          "IdentifierIssuingAuthority": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "IdentifierStartDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "IdentifierEndDate": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": "Reference identifier linking the account to appropriate tax handling GenericIdentification|GenericIdentification (https://www.iso20022.org/standardsrepository/type/GenericIdentification)|Standard|ISO2"
      },
      "deviceidentificationtypevalues": {
        "enum": [
          "IMEI",
          "Serialnumber",
          "Secureelementidentification",
          "Othernational",
          "Otherprivate"
        ],
        "type": "string",
        "description": ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned co"
      },
      "deviceidentification": {
        "type": "object",
        "properties": {
          "DeviceIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "DeviceIdentificationType": {
            "$ref": "#/components/schemas/deviceidentificationtypevalues"
          }
        },
        "description": ""
      },
      "devicetypevalues": {
        "enum": [
          "Securecardreader",
          "Nonsecurecardreader",
          "Mobile",
          "Tablet",
          "Personalcomputer",
          "Othernational",
          "Otherprivate",
          "Wearable",
          "Vehicle",
          "Embedded",
          "Keyfob",
          "Jewellery",
          "Sticker",
          "Gamingdevice",
          "Watch",
          "Unknown",
          "BiometricDevice"
        ],
        "type": "string",
        "description": ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` -"
      },
      "status": {
        "type": "object",
        "properties": {
          "StatusReason": {
            "$ref": "#/components/schemas/text"
          },
          "StatusDateTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "StatusValidityPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "StatusInvolvedParty": {
            "$ref": "#/components/schemas/involvedparty"
          }
        },
        "description": "The life cycle stage of a device\n\ne.g. active, defect"
      },
      "geographicalareatypevalues": {
        "enum": [
          "Continent",
          "Country",
          "State",
          "District",
          "Province",
          "Town",
          "City",
          "Region"
        ],
        "type": "string",
        "description": ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
      },
      "addresstypevalues": {
        "enum": [
          "PostalAddress",
          "GeolocationAddress",
          "LatitudeAddress",
          "LongitudeAddress",
          "ElectronicAddress"
        ],
        "type": "string",
        "description": ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
      },
      "address": {
        "type": "object",
        "properties": {
          "AddressType": {
            "$ref": "#/components/schemas/addresstypevalues"
          },
          "LocationReference": {
            "$ref": "#/components/schemas/location"
          }
        },
        "description": ""
      },
      "location": {
        "type": "object",
        "properties": {
          "LocationDescription": {
            "$ref": "#/components/schemas/text"
          },
          "LocationDateTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "LocationStatus": {
            "$ref": "#/components/schemas/status"
          },
          "LocationType": {
            "$ref": "#/components/schemas/geographicalareatypevalues"
          },
          "LocationZoningType": {
            "$ref": "#/components/schemas/text"
          },
          "LocationNeighborhoodType": {
            "$ref": "#/components/schemas/text"
          },
          "LocationConstructionType": {
            "$ref": "#/components/schemas/text"
          },
          "LocationOccupancyType": {
            "$ref": "#/components/schemas/text"
          },
          "LocationValue": {
            "$ref": "#/components/schemas/value"
          },
          "LocationCapacity": {
            "$ref": "#/components/schemas/text"
          },
          "LocationIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "LocationAddress": {
            "$ref": "#/components/schemas/address"
          },
          "LocationName": {
            "$ref": "#/components/schemas/name"
          },
          "LocationTimeZone": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": "Geographical location of the device."
      },
      "country": {
        "type": "object",
        "properties": {
          "NationalRegulatoryAuthority": {
            "$ref": "#/components/schemas/involvedparty"
          }
        },
        "description": "Country of the location."
      },
      "deviceoperatingsystemtypevalues": {
        "enum": [
          "Android",
          "Ios",
          "Windows",
          "Blackberry",
          "Tizen",
          "Othernational",
          "Otherprivate"
        ],
        "type": "string",
        "description": ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system."
      },
      "device": {
        "type": "object",
        "properties": {
          "DeviceIdentification": {
            "$ref": "#/components/schemas/deviceidentification"
          },
          "DeviceType": {
            "$ref": "#/components/schemas/devicetypevalues"
          },
          "DeviceProperty": {
            "$ref": "#/components/schemas/text"
          },
          "DeviceElement": {
            "$ref": "#/components/schemas/text"
          },
          "DeviceStatus": {
            "$ref": "#/components/schemas/status"
          },
          "DeviceVersion": {
            "type": "string",
            "description": "",
            "format": "number"
          },
          "DeviceDateTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "DeviceDescription": {
            "$ref": "#/components/schemas/text"
          },
          "DeviceName": {
            "$ref": "#/components/schemas/name"
          },
          "DeviceLanguage": {
            "$ref": "#/components/schemas/text"
          },
          "DevicePhoneNumber": {
            "$ref": "#/components/schemas/text"
          },
          "DeviceLocation": {
            "$ref": "#/components/schemas/location"
          },
          "DeviceManufacturer": {
            "$ref": "#/components/schemas/text"
          },
          "DeviceCountry": {
            "$ref": "#/components/schemas/country"
          },
          "DeviceAddress": {
            "$ref": "#/components/schemas/address"
          },
          "DeviceAddressType": {
            "$ref": "#/components/schemas/addresstypevalues"
          },
          "DeviceOperatingSystem": {
            "$ref": "#/components/schemas/deviceoperatingsystemtypevalues"
          }
        },
        "description": "Reference to the device instance in Issued Device Administration"
      },
      "featuretypevalues": {
        "enum": [
          "FeeFeature",
          "InterestFeature",
          "WithdrawalFeature",
          "DepositFeature",
          "SweepFeature",
          "LienFeature",
          "PaymentFeature",
          "RepaymentFeature",
          "LimitFeature",
          "OverdraftFeature",
          "StatementFeature",
          "CurrencyExchangeFeature",
          "PriceFeature"
        ],
        "type": "string",
        "description": ">\r\n* `FeeFeature` - This refers to the functionality in a system or platform that manages, calculates, or displays fees associated with specific transactions or services.\r\n* `InterestFeature` - This f"
      },
      "feature": {
        "type": "object",
        "properties": {
          "FeatureType": {
            "$ref": "#/components/schemas/featuretypevalues"
          },
          "FeatureIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "FeatureName": {
            "$ref": "#/components/schemas/name"
          },
          "FeatureLifecycleStatus": {
            "$ref": "#/components/schemas/status"
          },
          "FeatureDescription": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": "Tracked property of the issued device (e.g. card number)"
      },
      "accountidentificationtypevalues": {
        "enum": [
          "BBAN",
          "IBAN",
          "UPIC",
          "AccountNumber",
          "PAN",
          "Paym",
          "Wallet",
          "SortCodeAndAccountNumber"
        ],
        "type": "string",
        "description": ">\r\n* `BBAN` - Basic Bank Account Number (BBAN) - identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), to uniq"
      },
      "accountidentification": {
        "type": "object",
        "properties": {
          "AccountIdentificationType": {
            "$ref": "#/components/schemas/accountidentificationtypevalues"
          },
          "AccountIdentification": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        "description": "The associated account number in any suitable format (e.g. IBAN) AccountIdentification |AccountIdentification  (https://www.iso20022.org/standardsrepository/type/AccountIdentification)|Standard|ISO200"
      },
      "actiontypevalues": {
        "enum": [
          "Initiate",
          "Execute",
          "Create",
          "Transfer",
          "Pay",
          "Deliver",
          "Apply",
          "Calculate"
        ],
        "type": "string",
        "description": ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
      },
      "action": {
        "type": "object",
        "properties": {
          "ActionType": {
            "$ref": "#/components/schemas/actiontypevalues"
          }
        },
        "description": ""
      },
      "arrangementstatustypevalues": {
        "enum": [
          "Requested",
          "Proposed",
          "Offered",
          "Accepted",
          "Cancelled",
          "Fulfilled",
          "Terminated"
        ],
        "type": "string",
        "description": ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
      },
      "arrangementstatus": {
        "type": "object",
        "properties": {
          "ArrangementStatus": {
            "$ref": "#/components/schemas/status"
          },
          "ArrangementStatusType": {
            "$ref": "#/components/schemas/arrangementstatustypevalues"
          }
        },
        "description": "A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)"
      },
      "subject": {
        "type": "object",
        "properties": {
          "Subject": {
            "type": "string",
            "description": "A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.",
            "format": "class"
          }
        },
        "description": ""
      },
      "arrangementtypevalues": {
        "enum": [
          "SweepArrangement",
          "WithdrawalArrangement",
          "DepositArrangement",
          "InterestArrangement",
          "FeeArrangement",
          "LienArrangement",
          "InformationArrangement",
          "PaymentArrangement",
          "EntitlementArrangement",
          "PeriodArrangement",
          "CollateralArrangement",
          "LimitArrangement",
          "AccessArrangement",
          "CardPaymentArrangement",
          "StandingOrderArrangement",
          "OverdraftArrangement",
          "RepaymentArrangement",
          "StatementArrangement",
          "CreditTransferArrangement",
          "ProductAndServiceArrangement",
          "FactoringArrangement",
          "RolloverArrangement",
          "RestructuringArrangement",
          "InsuranceArrangement",
          "CollectionArrangement",
          "UnderwritingArrangement",
          "TerminationArrangement",
          "MaturityArrangement"
        ],
        "type": "string",
        "description": ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangem"
      },
      "arrangement": {
        "type": "object",
        "properties": {
          "ArrangementAction": {
            "$ref": "#/components/schemas/action"
          },
          "ArrangementStartDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "ArrangementEndDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "ArrangementStatus": {
            "$ref": "#/components/schemas/arrangementstatus"
          },
          "ArrangementSubjectMatter": {
            "$ref": "#/components/schemas/subject"
          },
          "Arrangementtype": {
            "$ref": "#/components/schemas/arrangementtypevalues"
          }
        },
        "description": "A permission that is recorded for the device; like use in ATM, use for internet identification, etc."
      },
      "branch": {
        "type": "object",
        "properties": {
          "BranchIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "BranchLegalEntityIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "BranchAddress": {
            "$ref": "#/components/schemas/address"
          },
          "BranchName": {
            "$ref": "#/components/schemas/name"
          }
        },
        "description": "Bank branch associated with the account for booking purposes ||\r\n|"
      },
      "issueddevicestatustypevalues": {
        "enum": [
          "Issued",
          "IssuedButNotActivated",
          "Activated",
          "Suspended",
          "Retrieved"
        ],
        "type": "string",
        "description": ">\r\n* `Issued` - \r\n* `IssuedButNotActivated` - \r\n* `Activated` - \r\n* `Suspended` - \r\n* `Retrieved` - \r\n"
      },
      "devicecustomizationtypevalues": {
        "enum": [
          "CardDesign"
        ],
        "type": "string",
        "description": ">\r\n* `CardDesign` - \r\n"
      },
      "rulesettypevalues": {
        "enum": [
          "Policy",
          "Regulation",
          "Law",
          "Guideline",
          "Criterion",
          "Standard"
        ],
        "type": "string",
        "description": ">\r\n* `Policy` - Rule that governs business execution.\n\nThe set of basic principles and associated guidelines, formulated and enforced by the governing body of an organization, to direct and limit its "
      },
      "ruleset": {
        "type": "object",
        "properties": {
          "RuleSetDefinition": {
            "$ref": "#/components/schemas/text"
          },
          "RuleSetInterpretation": {
            "$ref": "#/components/schemas/text"
          },
          "RuleSetType": {
            "$ref": "#/components/schemas/rulesettypevalues"
          },
          "RuleSetName": {
            "$ref": "#/components/schemas/name"
          },
          "RuleSetIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "RuleSetLifecycleStatus": {
            "$ref": "#/components/schemas/status"
          }
        },
        "description": "The processing and handling guidelines and rules"
      },
      "IssuedDevice": {
        "type": "object",
        "properties": {
          "IssuedDeviceAdministrationReference": {
            "$ref": "#/components/schemas/device"
          },
          "CustomerReference": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "DevicePropertyType": {
            "$ref": "#/components/schemas/feature"
          },
          "AccountExternalAccountNumber": {
            "$ref": "#/components/schemas/identifier"
          },
          "DevicePartyReference": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "DeviceIssueDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "DeviceType": {
            "$ref": "#/components/schemas/devicetypevalues"
          },
          "AccountIdentifier": {
            "$ref": "#/components/schemas/accountidentification"
          },
          "DeviceAssociatedPermissions": {
            "$ref": "#/components/schemas/arrangement"
          },
          "DeviceValidfromDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "DeviceCollectLocation": {
            "$ref": "#/components/schemas/branch"
          },
          "DevicePropertySetting": {
            "type": "string",
            "description": "The property setting",
            "format": ""
          },
          "DeviceStatus": {
            "$ref": "#/components/schemas/issueddevicestatustypevalues"
          },
          "DeviceOptionSetting": {
            "$ref": "#/components/schemas/arrangement"
          },
          "DeviceValidtoDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "DeviceDeliveryMethod": {
            "$ref": "#/components/schemas/text"
          },
          "DeviceCustomerCustomizationReference": {
            "$ref": "#/components/schemas/devicecustomizationtypevalues"
          },
          "DeviceOptionDefinition": {
            "$ref": "#/components/schemas/feature"
          },
          "DeviceProcessingGuidelinesandRules": {
            "$ref": "#/components/schemas/ruleset"
          }
        },
        "description": "The product features/services available with a financical facility"
      },
      "withdrawaltypevalues": {
        "enum": [
          "CashWithdrawal",
          "SecurityWithdrawal"
        ],
        "type": "string",
        "description": ">\r\n* `CashWithdrawal` - \r\n* `SecurityWithdrawal` - \r\n"
      },
      "paymenttypevalues": {
        "enum": [
          "Cashtransaction",
          "Domesticpayment",
          "Domestichighvaluepayment",
          "Domesticprioritypayment",
          "Crossborderpayment",
          "Crossborderprioritypayment",
          "Crossborderhighvaluepayment",
          "Thirdcurrencypayment",
          "Thirdcurrencyhighvaluepayment",
          "Thirdcurrencyprioritypayment",
          "Tradesettlementpayment",
          "Foreignexchange",
          "Equivalentamount",
          "Loan",
          "Loanrepayment",
          "Securities",
          "Lockbox",
          "Dividend",
          "Crossedcheque",
          "Opencheque",
          "Ordercheque",
          "Circularcheque",
          "Travellerscheques",
          "Bankdraft",
          "Cashletter",
          "Documentarycredit",
          "Billofexchange",
          "Collection",
          "Cashmanagementtransfer",
          "Sweepaccount",
          "Topaccount",
          "Zerobalanceaccount",
          "Standingfacilities",
          "Swiftpayservicelevelcredit",
          "Priorityservicelevelcredit",
          "Standardservicelevelcredit",
          "Liquiditytransfer",
          "Advancepayment",
          "Valuedateadjustment",
          "Dvpgross",
          "Dvpnet",
          "Netting",
          "Limitpayment",
          "Backup",
          "Expresspayment",
          "Centralbankoperation",
          "Clspayment",
          "Eurodomesticpayment",
          "Agriculturaltransfer",
          "Alimonypayment",
          "Balanceretail",
          "Bonuspayment.",
          "Brokeragefee",
          "Capitalbuilding",
          "Charitypayment",
          "Childbenefit",
          "Commercialcredit",
          "Commission",
          "Commoditytransfer",
          "Costs",
          "Copyright",
          "Governmentpayment",
          "Instalmenthirepurchaseagreement",
          "Insurancepremium",
          "Intracompanypayment",
          "Interest",
          "Licensefee",
          "Metals",
          "Pensionpayment",
          "Purchasesaleofgoods",
          "Refund",
          "Rent",
          "Royalties",
          "Purchasesaleofservices",
          "Salarypayment",
          "Socialsecuritybenefit",
          "Standingorder",
          "Subscription",
          "Treasurystatepayment",
          "Unemploymentdisabilitybenefit",
          "Valueaddedtaxpayment",
          "Withholdingtax",
          "Taxpayment",
          "Miscellaneous",
          "Overnightdeposit",
          "Marginallending",
          "Other",
          "Upfront",
          "Unwind",
          "Principalexchange"
        ],
        "type": "string",
        "description": ">\r\n* `Cashtransaction` - Transaction is a withdrawal/deposit of cash.\r\n* `Domesticpayment` - Payment has an origin and a destination in the same country, and is made in the currency of that country.\r\n"
      },
      "paymentdatetimetypevalues": {
        "enum": [
          "RequestedExecutionDate",
          "AcceptanceDate",
          "CreationDate",
          "ValueDate",
          "DueDate",
          "ExpiryDate"
        ],
        "type": "string",
        "description": ">\r\n* `RequestedExecutionDate` - Date at which the initiating party requests the clearing agent to process the payment. ISO20022\nUsage: This is the date on which the debtor's account is to be debited. "
      },
      "paymentdatetime": {
        "type": "object",
        "properties": {
          "PaymentDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "PaymentDateType": {
            "$ref": "#/components/schemas/paymentdatetimetypevalues"
          }
        },
        "description": ""
      },
      "paymentpurposevalues": {
        "enum": [
          "Salarypayment",
          "Treasurypayment",
          "Advancepayment",
          "Agriculturaltransfer",
          "Alimonypayment",
          "Childbenefit",
          "Unemploymentdisabilitybenefit",
          "Bonuspayment.",
          "Cashmanagementtransfer",
          "Capitalbuilding",
          "Charitypayment",
          "Collectionpayment",
          "Commoditytransfer",
          "Commercialpayment",
          "Commission",
          "Costs",
          "Copyright",
          "Dividend",
          "Foreignexchange",
          "Purchasesaleofgoods",
          "Governmentpayment",
          "Instalmenthirepurchaseagreement",
          "Intracompanypayment",
          "Insurancepremium",
          "Interest",
          "Licensefee",
          "Loan",
          "Loanrepayment",
          "Netting",
          "Payroll",
          "Pensionpayment",
          "Refund",
          "Rent",
          "Royalties",
          "Purchasesaleofservices",
          "Securities",
          "Socialsecuritybenefit",
          "Subscription",
          "Taxpayment",
          "Valueaddedtaxpayment",
          "Consumerthirdpartyconsolidatedpayment",
          "Debitcollectionpayment",
          "Supplierpayment",
          "Hedging",
          "Multipleservicetypes",
          "Nototherwisespecified",
          "Cardpayment",
          "Creditcardbill",
          "Ferry",
          "Air",
          "Bus",
          "Railway",
          "Convalescentcarefacility",
          "Dentalservices",
          "Anesthesiaservices",
          "Homehealthcare",
          "Hospitalcare",
          "Intermediatecarefacility",
          "Longtermcarefacility",
          "Medicalservices",
          "Visioncare",
          "Durablemedicaleequipment",
          "Cabletvbill",
          "Electricitybill",
          "Gasbill",
          "Telephonebill",
          "Othertelecomrelatedbill",
          "Waterbill",
          "Study",
          "Pricepayment",
          "Installment",
          "Recurringinstallmentpayment",
          "Openingfee",
          "Cancellationfee",
          "Governmentinsurance",
          "Insurancepremiumcar",
          "Laborinsurance",
          "Lifeinsurance",
          "Propertyinsurance",
          "Healthinsurance",
          "Carloanprincipalrepayment",
          "Housingloanrepayment",
          "Companysocialloanpaymenttobank",
          "Estatetax",
          "Housingtax",
          "Incometax",
          "Netincometax",
          "Businessexpenses",
          "Trustfund",
          "Networkcharge",
          "Networkcommunication",
          "Receiptpayment",
          "Paymentterms",
          "Other",
          "Withholding"
        ],
        "type": "string",
        "description": ">\r\n* `Salarypayment` - Transaction is the payment of salaries.\r\n* `Treasurypayment` - Transaction is related to treasury operations.\r\n* `Advancepayment` - Transaction is an advance payment.\r\n* `Agricu"
      },
      "paymenttransactionstatustypevalues": {
        "enum": [
          "Acceptedtechnicalvalidation",
          "Received",
          "Partiallyaccepted",
          "Rejected",
          "Pending",
          "Acceptedcustomerprofile",
          "Acceptedsettlementinprocess",
          "Acceptedsettlementcompleted",
          "Accepted",
          "Acceptedcancellationrequest",
          "Rejectedcancellationrequest",
          "Acceptedwithchange",
          "Partiallyacceptedcancellationrequest",
          "Pendingcancellationrequest",
          "Acceptedcreditsettlementcompleted",
          "Paymentcancelled",
          "Nocancellationprocess"
        ],
        "type": "string",
        "description": ">\r\n* `Acceptedtechnicalvalidation` - Authentication and syntactical and semantical validation are successful.\r\n* `Received` - Payment initiation has been received by the receiving agent.\r\n* `Partially"
      },
      "paymenttransactionstatus": {
        "type": "object",
        "properties": {
          "PaymentTransactionStatus": {
            "$ref": "#/components/schemas/status"
          },
          "PaymentTransactionStatusType": {
            "$ref": "#/components/schemas/paymenttransactionstatustypevalues"
          }
        },
        "description": "Specifies the status of a payment transaction at a specified time.\nElements"
      },
      "currencytypevalues": {
        "enum": [
          "BaseCurrency",
          "ReportingCurrency",
          "SecondaryCurrency",
          "TransferCurrency"
        ],
        "type": "string",
        "description": ">\r\n* `BaseCurrency` - Base currency of the account. (ISO20022)\n\r\n* `ReportingCurrency` - Currency used to calculate and report the balance and related entries of an account. (ISO20022)\n\r\n* `SecondaryC"
      },
      "debitcreditindicatortvalues": {
        "enum": [
          "Debit",
          "Credit"
        ],
        "type": "string",
        "description": ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
      },
      "paymenttransaction": {
        "type": "object",
        "properties": {
          "PaymentTransactionType": {
            "$ref": "#/components/schemas/paymenttypevalues"
          },
          "PaymentTransactionAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "PaymentTransactionIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "PaymentTransactionUsedMechanism": {
            "$ref": "#/components/schemas/text"
          },
          "PaymentTransactionDatetime": {
            "$ref": "#/components/schemas/paymentdatetime"
          },
          "PaymentTransactionPurpose": {
            "$ref": "#/components/schemas/paymentpurposevalues"
          },
          "PaymentTransactionStatus": {
            "$ref": "#/components/schemas/paymenttransactionstatus"
          },
          "PaymentTransactionAppliedFeeAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "PaymentTransactionCurrency": {
            "$ref": "#/components/schemas/currencytypevalues"
          },
          "PaymentCreditDebitIndicator": {
            "$ref": "#/components/schemas/debitcreditindicatortvalues"
          }
        },
        "description": "Details of the withdrawal transaction"
      },
      "Withdrawal": {
        "type": "object",
        "properties": {
          "WithdrawalType": {
            "$ref": "#/components/schemas/withdrawaltypevalues"
          },
          "WithdrawalTransactionSourceReference": {
            "type": "string",
            "description": "Identifies the target for the withdrawal",
            "format": "object"
          },
          "WihdrawalTransactionAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "WithdrawalTransactionWithdrawalType": {
            "$ref": "#/components/schemas/withdrawaltypevalues"
          },
          "WithdrawalTransactionDate": {
            "$ref": "#/components/schemas/date"
          },
          "AccountLimitBreachResponse": {
            "$ref": "#/components/schemas/text"
          },
          "WithdrawalTransaction": {
            "$ref": "#/components/schemas/paymenttransaction"
          },
          "WithdrawalTransactionDescription": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": "The product features/services available with a financical facility"
      },
      "schedule": {
        "type": "object",
        "properties": {
          "ScheduleType": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": "Sweep processing guidelines and scheduling rules"
      },
      "sweeptransaction": {
        "type": "object",
        "properties": {
          "SweepTransaction": {
            "type": "string",
            "description": "An transaction which is the result of fulfilling a sweep arrangement",
            "format": "class"
          }
        },
        "description": "The transaction record for an applied sweep"
      },
      "mandatestatustypevalues": {
        "enum": [
          "Accepted",
          "Rejected"
        ],
        "type": "string",
        "description": ">\r\n* `Accepted` - \r\n* `Rejected` - \r\n"
      },
      "mandatestatus": {
        "type": "object",
        "properties": {
          "MandateStatus": {
            "$ref": "#/components/schemas/status"
          },
          "MandateStatusType": {
            "$ref": "#/components/schemas/mandatestatustypevalues"
          }
        },
        "description": "Specifies whether a mandate is accepted or rejected. (ISO20022)"
      },
      "mandatetypevalues": {
        "enum": [
          "Consent",
          "PowerOfAttorney",
          "DirectDebitMandate",
          "ServicingMandate"
        ],
        "type": "string",
        "description": ">\r\n* `Consent` - Permission or Agreement obtained from someone or something having authority or power\n\nPermission for something to happen or agreement to do something.\r\n* `PowerOfAttorney` - A written"
      },
      "yesnoindicator": {
        "type": "object",
        "properties": {
          "Yesnoindicator": {
            "type": "string",
            "description": "Indicates a \"Yes\" or \"No\" type of answer for an element. (ISO20022)\ntrue: Yes\nfalse: No",
            "format": "datatype"
          }
        },
        "description": "Specifies whether the direct debit instructions should be automatically re-submitted periodically when bilaterally agreed (ISO20022)"
      },
      "mandate": {
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/mandatestatus"
          },
          "TrackingDays": {
            "type": "string",
            "description": "Specifies the number of days the mandate must be tracked. (ISO20022)",
            "format": "number"
          },
          "Identification": {
            "$ref": "#/components/schemas/identifier"
          },
          "Type": {
            "$ref": "#/components/schemas/mandatetypevalues"
          },
          "Duration": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "TrackingIndicator": {
            "$ref": "#/components/schemas/yesnoindicator"
          }
        },
        "description": "Confirmation that the sweep processing is sanctioned as necessary"
      },
      "modalitytypevalues": {
        "enum": [
          "AllocationModality",
          "CalculationModality",
          "DerivationModality",
          "PaymentModality",
          "ProcessingModality",
          "ApplicationModality",
          "DeliveryModality"
        ],
        "type": "string",
        "description": ">\r\n* `AllocationModality` - \r\n* `CalculationModality` - \r\n* `DerivationModality` - \r\n* `PaymentModality` - \r\n* `ProcessingModality` - \r\n* `ApplicationModality` - \r\n* `DeliveryModality` - \r\n"
      },
      "servicemodality": {
        "type": "object",
        "properties": {
          "ServiceModalityType": {
            "$ref": "#/components/schemas/modalitytypevalues"
          }
        },
        "description": "The way sweep transactions will be triggered and executed (on the \"from side) or what the reaction should be (on the receive side)\n\ne.g. buy securities when a sweep of the \"petty cash\" type is receive"
      },
      "accountstatustypevalues": {
        "enum": [
          "Enabled",
          "Disabled",
          "Deleted",
          "Proforma",
          "Pending"
        ],
        "type": "string",
        "description": ">\r\n* `Enabled` - Account can be used for its intended purpose.\r\n* `Disabled` - Account cannot be used for its intended purpose, either temporarily or permanently.\r\n* `Deleted` - Account cannot be used"
      },
      "accountstatus": {
        "type": "object",
        "properties": {
          "AccountStatus": {
            "$ref": "#/components/schemas/status"
          },
          "AccountStatusType": {
            "$ref": "#/components/schemas/accountstatustypevalues"
          }
        },
        "description": "A characteristic of account which refers to the LifecycleStatus of account like opened, closed, blocked, etc.\n\nSpecifies the current state of an account. (ISO20022)"
      },
      "accountdatetimetypevalues": {
        "enum": [
          "OpeningDate",
          "ClosingDate",
          "BlockingDate",
          "MaturityDate",
          "LiveDate",
          "RenewalDate"
        ],
        "type": "string",
        "description": "Key dates associated with the account (e.g. opening date, closing date) Account/OpeningDate|Account/OpeningDate (https://www.iso20022.org/standardsrepository/type/Account)|Standard|ISO20022 BM ()"
      },
      "accountdatetime": {
        "type": "object",
        "properties": {
          "AccountDateType": {
            "$ref": "#/components/schemas/accountdatetimetypevalues"
          },
          "AccountDate": {
            "$ref": "#/components/schemas/datetime"
          }
        },
        "description": "A characteristic of account which refers to LifecycleDate of account (e.g., ClosingDate, OpeningDate, LiveDate, etc.) "
      },
      "accounttypevalues": {
        "enum": [
          "DebitAccount",
          "CreditAccount",
          "VostroAcount",
          "NostroAccount",
          "PaymentAccount",
          "SettlementAccount",
          "SavingAccount",
          "CurrentAccount",
          "CashAccount",
          "LoanAccount",
          "IndividualAccount",
          "JointAccount",
          "LiquidationAccount",
          "ProvisionAccount",
          "PartnershipAccount",
          "InvestmentAccount"
        ],
        "type": "string",
        "description": "The type of savings account (e.g. checking, student, small business) OBExternalAccountSubType1Code| ()|Standard|UK Open Banking ()"
      },
      "balancetypevalues": {
        "enum": [
          "OpeningBalance",
          "ClosingBalance",
          "CurrentBalance",
          "AvailableBalance",
          "LedgerBalance",
          "ReserveBalance",
          "FreeBalance",
          "PrincipalBalance",
          "ClosingAvailable",
          "ClosingBooked",
          "ForwardAvailable",
          "Information",
          "InterimAvailable",
          "InterimBooked",
          "OpeningAvailable",
          "OpeningBooked",
          "PreviouslyClosedBooked",
          "Expected"
        ],
        "type": "string",
        "description": ">\r\n* `OpeningBalance` - Book balance of the account at the beginning of the account servicer's business day. It always equals the closing book balance from the previous business day. Note: the availab"
      },
      "balancecounterpartytypevalues": {
        "enum": [
          "Bilateral",
          "Multilateral"
        ],
        "type": "string",
        "description": ">\r\n* `Bilateral` - Balance calculated regarding one member in the system. (ISO20022)\r\n* `Multilateral` - Balance calculated regarding all members in the system. (ISO20022)\r\n"
      },
      "balancesubtypevalues": {
        "enum": [
          "Adjustment",
          "Basecurrency",
          "Blocked",
          "Blockedfunds",
          "Daylightoverdraft",
          "Eligibleassets",
          "Firmcollateralization",
          "Amountsthathavebeenusedtoserveasfirmcollateral",
          "Securitiesforecast",
          "Netfunding",
          "Intermediate",
          "Localcurrency",
          "Limitrelated",
          "Reservedliquidity",
          "Securitiespending",
          "Payinpayout",
          "Progressiveaverage",
          "Reserve",
          "Selfcollateralization",
          "Amountsthathavebeenusedtoserveasselfcollateral",
          "Threshold"
        ],
        "type": "string",
        "description": ">\r\n* `Adjustment` - Balance to be held in the settlement account in order to comply with the average reserve due, in the event that the bank's balance is equal to the reserve due during the remaining "
      },
      "accountbalance": {
        "type": "object",
        "properties": {
          "BalanceAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "BalanceType": {
            "$ref": "#/components/schemas/balancetypevalues"
          },
          "BalanceValueDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "BalanceIndicator": {
            "$ref": "#/components/schemas/debitcreditindicatortvalues"
          },
          "BalanceCounterpartyType": {
            "$ref": "#/components/schemas/balancecounterpartytypevalues"
          },
          "BalanceCalculationDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "BalanceSubType": {
            "$ref": "#/components/schemas/balancesubtypevalues"
          }
        },
        "description": "The state of the obligations managed on the account, the result of all entries on the account.\n\nNumerical representation of the net increases and decreases in an account at a specific point in time. ("
      },
      "accountcurrency": {
        "type": "object",
        "properties": {
          "AccountCurrencyType": {
            "$ref": "#/components/schemas/currencytypevalues"
          },
          "AccountCurrency": {
            "$ref": "#/components/schemas/currencycode"
          }
        },
        "description": "The primary account currency CurrencyCode|CurrencyCode (https://www.iso20022.org/standardsrepository/type/CurrencyCode)|Standard|ISO20022 BM ()"
      },
      "account": {
        "type": "object",
        "properties": {
          "AccountStatus": {
            "$ref": "#/components/schemas/accountstatus"
          },
          "AccountIdentification": {
            "$ref": "#/components/schemas/accountidentification"
          },
          "AccountDate": {
            "$ref": "#/components/schemas/accountdatetime"
          },
          "AccountType": {
            "$ref": "#/components/schemas/accounttypevalues"
          },
          "AccountPurpose": {
            "$ref": "#/components/schemas/text"
          },
          "AccountBalance": {
            "$ref": "#/components/schemas/accountbalance"
          },
          "AccountCurrency": {
            "$ref": "#/components/schemas/accountcurrency"
          },
          "AccountDescription": {
            "$ref": "#/components/schemas/text"
          },
          "AccountName": {
            "$ref": "#/components/schemas/name"
          }
        },
        "description": "Details of the linked account Account|Account  (https://www.iso20022.org/standardsrepository/type/Account)|Standard|ISO20022 BM ()"
      },
      "sweeparrangement": {
        "type": "object",
        "properties": {
          "SweepType": {
            "$ref": "#/components/schemas/text"
          },
          "SweepModalitites": {
            "$ref": "#/components/schemas/servicemodality"
          },
          "SweepCounterAccountReference": {
            "$ref": "#/components/schemas/account"
          },
          "SweepSchedule": {
            "$ref": "#/components/schemas/schedule"
          },
          "SweepMandate": {
            "$ref": "#/components/schemas/mandate"
          },
          "SweepDirection": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": "The set-up of the sweep facility"
      },
      "financialfacility": {
        "type": "object",
        "properties": {
          "FinancialFacility": {
            "type": "string",
            "description": "A production or operational capacity to perform a business function for delivering a banking product or service\n\nA functional classification of banking product that provides ongoing capacity to delive",
            "format": "class"
          }
        },
        "description": "The facility that the sweep is made to/from"
      },
      "Sweep": {
        "type": "object",
        "properties": {
          "SweepApplicationSchedule": {
            "$ref": "#/components/schemas/schedule"
          },
          "SweepDefinition": {
            "$ref": "#/components/schemas/text"
          },
          "SweepExecutionDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "SweepProcessingSchedule": {
            "$ref": "#/components/schemas/schedule"
          },
          "SweepApplicationRecord": {
            "$ref": "#/components/schemas/sweeptransaction"
          },
          "SweepType": {
            "$ref": "#/components/schemas/text"
          },
          "SweepAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "SweepMandate": {
            "$ref": "#/components/schemas/mandate"
          },
          "SweepConfiguration": {
            "$ref": "#/components/schemas/sweeparrangement"
          },
          "SweepTargetAccount": {
            "$ref": "#/components/schemas/financialfacility"
          }
        },
        "description": "The product features/services available with a financical facility"
      },
      "instructiondatetimetypevalues": {
        "enum": [
          "DueDate",
          "ExecutionDate",
          "FulfillmentDate"
        ],
        "type": "string",
        "description": ">\r\n* `DueDate` - \r\n* `ExecutionDate` - \r\n* `FulfillmentDate` - \r\n"
      },
      "instructiondatetime": {
        "type": "object",
        "properties": {
          "InstructionDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "InstructionDateType": {
            "$ref": "#/components/schemas/instructiondatetimetypevalues"
          }
        },
        "description": ""
      },
      "instructionstatustypevalues": {
        "enum": [
          "Pendingprocessing",
          "Acknowledgedaccepted",
          "Rejected",
          "Accepted",
          "Completed",
          "Notreceived",
          "Cancelled",
          "Beingcancelled",
          "Receivedbyissuerorregistrar",
          "Pending",
          "Standinginstruction",
          "Queued",
          "Cancelledbysubcustodian",
          "Forwarded"
        ],
        "type": "string",
        "description": ">\r\n* `Pendingprocessing` - Processing of the instruction is pending.\r\n* `Acknowledgedaccepted` - Instruction has been acknowledged and accepted and is validated for further processing.\r\n* `Rejected` -"
      },
      "instructionstatus": {
        "type": "object",
        "properties": {
          "InstructionStatusType": {
            "$ref": "#/components/schemas/instructionstatustypevalues"
          },
          "InstructionStatus": {
            "$ref": "#/components/schemas/status"
          }
        },
        "description": "A characteristic of instruction which refers to the LifecycleStatus of instruction (e.g., requested, executed, fulfilled, etc.); "
      },
      "instructionidentificationtypevalues": {
        "enum": [
          "OrderNumber",
          "InstructionNumber"
        ],
        "type": "string",
        "description": ">\r\n* `OrderNumber` - \r\n* `InstructionNumber` - \r\n"
      },
      "instructionidentification": {
        "type": "object",
        "properties": {
          "InstructionIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "InstructionIdentificationType": {
            "$ref": "#/components/schemas/instructionidentificationtypevalues"
          }
        },
        "description": "An identifier that allows to uniquely refer to an instance of an Instruction.\n"
      },
      "instructiontypevalues": {
        "enum": [
          "PaymentInstruction",
          "DeliveryOrder",
          "InformationRequest",
          "ExchangeInstruction",
          "AllocationInstruction",
          "MaintenanceInstruction"
        ],
        "type": "string",
        "description": ">\r\n* `PaymentInstruction` - \r\n* `DeliveryOrder` - \r\n* `InformationRequest` - \r\n* `ExchangeInstruction` - \r\n* `AllocationInstruction` - \r\n* `MaintenanceInstruction` - \r\n"
      },
      "log": {
        "type": "object",
        "properties": {
          "LogType": {
            "$ref": "#/components/schemas/text"
          },
          "LogPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "LogDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "LogIdentification": {
            "$ref": "#/components/schemas/identifier"
          }
        },
        "description": ""
      },
      "instruction": {
        "type": "object",
        "properties": {
          "InstructionDate": {
            "$ref": "#/components/schemas/instructiondatetime"
          },
          "InstructionStatus": {
            "$ref": "#/components/schemas/instructionstatus"
          },
          "InstructionIdentifier": {
            "$ref": "#/components/schemas/instructionidentification"
          },
          "InstructionType": {
            "$ref": "#/components/schemas/instructiontypevalues"
          },
          "InstructionResult": {
            "$ref": "#/components/schemas/text"
          },
          "InstructionDescription": {
            "$ref": "#/components/schemas/text"
          },
          "InstructionLog": {
            "$ref": "#/components/schemas/log"
          },
          "InstructionPurpose": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": "Processing instructions for this amount block as far as these deviate from the standard amount block processing"
      },
      "AmountBlock": {
        "type": "object",
        "properties": {
          "AmountBlockReference": {
            "$ref": "#/components/schemas/identifier"
          },
          "AmountBlockType": {
            "$ref": "#/components/schemas/text"
          },
          "AmountBlockPriorityNumber": {
            "type": "string",
            "description": "Number that indicates the priority of the amount block whne used fo authorisattion of transactions",
            "format": "number"
          },
          "AmountBlockProcessingInstructions": {
            "$ref": "#/components/schemas/instruction"
          },
          "AmountBlockReason": {
            "$ref": "#/components/schemas/text"
          },
          "AmountBlockOriginatorReference": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "AmountBlockAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "AmountBlockStartDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "AmountBlockExpiryDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "AmountBlockStatus": {
            "$ref": "#/components/schemas/status"
          }
        },
        "description": "The product features/services available with a financical facility"
      },
      "priorityvaluetypes": {
        "enum": [
          "Urgent",
          "High",
          "Normal",
          "Low"
        ],
        "type": "string",
        "description": ">\r\n* `Urgent` - Priority level is urgent (highest priority possible).\r\n* `High` - Priority level is high.\r\n* `Normal` - Priority level is normal.\r\n* `Low` - Priority level is low.\r\n"
      },
      "clearingchanneltypevalues": {
        "enum": [
          "Realtimegrosssettlementsystem",
          "Realtimenetsettlementsystem",
          "Masspaymentnetsystem",
          "Booktransfer"
        ],
        "type": "string",
        "description": ">\r\n* `Realtimegrosssettlementsystem` - Clearing channel is a real-time gross settlement system.\r\n* `Realtimenetsettlementsystem` - Clearing channel is a real-time net settlement system.\r\n* `Masspaymen"
      },
      "paymentlocalinstumenttypevalues": {
        "enum": [
          "Directdebitconfirmedelectronicmandate",
          "Directdebitpapermandatewithpaperauthorization",
          "Directdebitunconfirmedelectronicmandate",
          "Batchpaymentsaruba",
          "Instantpaymentsaruba",
          "Credittransfers",
          "Nonpreauthoriseddirectdebitat",
          "Preauthoriseddirectdebitat",
          "Cashperpost",
          "Returnedcredittransfers",
          "Truncatedcredittransfers",
          "Directdebits",
          "Returneddirectdebits",
          "Truncatedchecks",
          "Revokedcredittransfers",
          "Revokeddirectdebits",
          "Revokedreturnedcredittransfers",
          "Revokedreturneddirectdebits",
          "Revokedtruncatedchecks",
          "Revokedtruncatedcredittransfers",
          "Cardclearing",
          "Nonpreauthoriseddirectdebitde",
          "Preauthoriseddirectdebitde",
          "Imagebasedchequecollection",
          "Paperlesschequecollection",
          "Businesstobusinessdirectdebit",
          "Businesstocustomerdirectdebit",
          "Ancillarysystemtransferinitiation",
          "Backuppayment",
          "Mandatedpayment",
          "Settlementbanktransferinitiation",
          "Preauthoriseddirectdebitacc\u00e9l\u00e9r\u00e9acceleratedclearing2dayordinairenormalclearing4day",
          "Preauthoriseddirectdebitordinairenormalclearing4day",
          "Preauthoriseddirectdebitv\u00e9rifi\u00e9verifiedclearing",
          "Recoveredbillofexchangeorpromissorynote",
          "Nonpreauthoriseddirectdebitriba",
          "Preauthorisedrevocabledirectdebit",
          "Preauthorisedrevocableurgentdirectdebit",
          "Paymentsviainternetownedbycurrence",
          "Instantcredittransfernottimecritical",
          "Instantcredittransfertimecritical",
          "Paymentsviainternetownedbycurrenceusinginstantcredittransfer",
          "Paymentsviainternetownedbycurrenceusinginstantcredittransfernottimecritical",
          "Paymentsviainternetownedbycurrenceusinginstantcredittransfertimecritical",
          "Dutchdomesticbulkpayment",
          "Dutchurgentpayment",
          "Paymentviaacceptgiroownedbycurrence",
          "Paymentsviastandaarddigitalenota",
          "Incidentmanagementcorrection",
          "Directdebitinitiatedbythegovernmentwithspecialconditions",
          "Masspaymentbeneficiary",
          "Masspaymentours",
          "Masspaymentshared",
          "Standingorder",
          "Oneoffauthorisation",
          "Oneoffauthorisationcharities",
          "Oneoffauthorisationconstructionindustry",
          "Oneoffauthorisationtuitionfees",
          "Standingauthorisationcompanies",
          "Standingauthorisationcompanieswithoutdebtorrevocationright",
          "Standingauthorisationgeneral",
          "Standingauthorisationlotteries",
          "Convertedbankpayment",
          "Businesspayment",
          "Crossbordercustomercredittransfer",
          "Overnight",
          "Paymentwitheri",
          "Sameday",
          "Corenorefund",
          "Directdebitfixedamount",
          "Sepadirectdebitcore",
          "Sepab2bdirectdebitami",
          "Sepabusinesstobusinessdirectdebit",
          "Sepacored1directdebitami",
          "Sepacoredirectdebitami",
          "Sepadirectdebit1daysettlement",
          "Sepafadirectdebitami",
          "Instantcredittransfer",
          "Authenticateddirectdebit",
          "Unauthenticateddirectdebit",
          "Cashconcentrationintragroup",
          "Banktransfer",
          "Checksamedaysettlementwire",
          "Customertransfer",
          "Customertransferplus",
          "Deposittosendersaccount",
          "Fedfundsreturned",
          "Fedfundssold",
          "Nonvalueservicemessage",
          "Drawdownresponsevaluetohonoradrawdownrequest",
          "Banktobankdrawdownrequestorresponsenonvalue",
          "Customerorcorporatedrawdownrequestorresponsenonvalue",
          "Internationalach",
          "Cashconcentrationordisbursementcorporatecounterparty",
          "Corporatetradeexchange",
          "Prearrangedpaymentordepositconsumercounterparty",
          "Customerinitiatedentry",
          "Representedcheckentry",
          "Accountsreceivablecheck",
          "Internetinitiatedentry",
          "Pointofpurchase",
          "Pointofsale",
          "Telephoneinitiatedentry"
        ],
        "type": "string",
        "description": ">\r\n* `Directdebitconfirmedelectronicmandate` - Transaction is related to a direct debit instruction authorized under a confirmed electronic mandate.\r\n* `Directdebitpapermandatewithpaperauthorization` "
      },
      "paymentcategorypurposetypevalues": {
        "enum": [
          "Bonuspayment",
          "Cashmanagementtransfer",
          "Cardbulkclearing",
          "Creditcardpayment",
          "Tradesettlementpayment",
          "Debitcardpayment",
          "Dividend",
          "Deliveragainstpayment",
          "Epayment",
          "Feecollection",
          "Governmentpayment",
          "Hedging",
          "Irrevocablecreditcardpayment",
          "Irrevocabledebitcardpayment",
          "Intracompanypayment",
          "Interest",
          "Loan",
          "Commercial",
          "Consumer",
          "Otherpayment",
          "Pensionpayment",
          "Represented",
          "Reimbursementreceivedcredittransfer",
          "Receiveagainstpayment",
          "Salarypayment",
          "Securities",
          "Socialsecuritybenefit",
          "Supplierpayment",
          "Taxpayment",
          "Trade",
          "Treasurypayment",
          "Valueaddedtaxpayment",
          "Withholding"
        ],
        "type": "string",
        "description": ">\r\n* `Bonuspayment` - Transaction is the payment of a bonus.\r\n* `Cashmanagementtransfer` - Transaction is a general cash management instruction.\r\n* `Cardbulkclearing` - A Service that is settling mone"
      },
      "paymentsequencetypevalues": {
        "enum": [
          "First",
          "Recurring",
          "Final",
          "Oneoff",
          "Represented"
        ],
        "type": "string",
        "description": ">\r\n* `First` - First collection of a series of direct debit instructions.\r\n* `Recurring` - Direct debit instruction where the debtor's authorisation is used for regular direct debit transactions initi"
      },
      "paymentprocessingarrangementmodality": {
        "type": "object",
        "properties": {
          "PaymentProcessingPriority": {
            "$ref": "#/components/schemas/priorityvaluetypes"
          },
          "PaymentProcessingArrangement": {
            "$ref": "#/components/schemas/arrangement"
          },
          "PaymentProcessingClearingChannel": {
            "$ref": "#/components/schemas/clearingchanneltypevalues"
          },
          "PaymentLocalInstument": {
            "$ref": "#/components/schemas/paymentlocalinstumenttypevalues"
          },
          "PaymentCategoryPurpose": {
            "$ref": "#/components/schemas/paymentcategorypurposetypevalues"
          },
          "PaymentSequence": {
            "$ref": "#/components/schemas/paymentsequencetypevalues"
          }
        },
        "description": "Definition of the processing option and impact (e.g. frequency and cumulative amount constraints)"
      },
      "feetypevalues": {
        "enum": [
          "Accountingfee",
          "Adrfee",
          "Advisoryfee",
          "Airwaybillfee",
          "Backendload",
          "Brokeragefee",
          "Clearanceandhandlingatdestination",
          "Clearanceandhandlingatorigin",
          "Collectfreight",
          "Commission",
          "Contingencydeferredsalescharge",
          "Correspondentbankcharge",
          "Custodyfee",
          "Dangerousgoodsfee",
          "Dilutionlevy",
          "Discount",
          "Equalisation",
          "Frontendload",
          "Initial",
          "Insurancepremium",
          "Issuancecancellationfee",
          "Issuancefee",
          "Managementfee",
          "Matchingfees",
          "Miscellaneousfee",
          "Other",
          "Packaging",
          "Partacquis",
          "Penalty",
          "Pickup",
          "Postagecharge",
          "Premium",
          "Publicationfee",
          "Regulatoryfee",
          "Securitycharge",
          "Serviceprovisionfee",
          "Shippingcharge",
          "Signatureservice",
          "Specialconcessions",
          "Speciallyagreedfrontendload",
          "Storageatdestination",
          "Storageatorigin",
          "Switch",
          "Transferfee",
          "Transportcharges",
          "Ucitscommission",
          "ChequeRelatedFee"
        ],
        "type": "string",
        "description": ">\r\n* `Accountingfee` - Fee paid for accounting services rendered.\r\n* `Adrfee` - Charge linked to an ADR (American Depositary Receipt).\r\n* `Advisoryfee` - Fee paid for advisory services rendered.\r\n* `A"
      },
      "directdebitstatustypevalues": {
        "enum": [
          "Active",
          "Inactive",
          "Created",
          "PendingApproval",
          "Cancelled",
          "Expired",
          "Rejected",
          "Completed",
          "Archived",
          "Failed",
          "Suspended"
        ],
        "type": "string",
        "description": ">\r\n* `Active` - The mandate is active.\r\n* `Inactive` - \r\n* `Created` - \r\n* `PendingApproval` - \r\n* `Cancelled` - The mandate is cancelled.\r\n* `Expired` - The mandate has passed the end date.\r\n* `Rejec"
      },
      "directdebittypevalues": {
        "enum": [
          "FixedAmount",
          "VariableAmount",
          "UsagebasedAmont",
          "Paper",
          "Emandate"
        ],
        "type": "string",
        "description": ">\r\n* `FixedAmount` - Direct debit amount is fixed.\r\n* `VariableAmount` - Direct debit amount is variable.\r\n* `UsagebasedAmont` - Direct debit amount is based on usage.\r\n* `Paper` - This is a physical "
      },
      "directdebitmandate": {
        "type": "object",
        "properties": {
          "DirectDebitMandateIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "DirectDebitPurpose": {
            "$ref": "#/components/schemas/text"
          },
          "DirectDebitSourceAccount": {
            "$ref": "#/components/schemas/account"
          },
          "DirectDebitStatus": {
            "$ref": "#/components/schemas/directdebitstatustypevalues"
          },
          "DirectDebitType": {
            "$ref": "#/components/schemas/directdebittypevalues"
          }
        },
        "description": "Reference to the applicable mandate for direct debits"
      },
      "billpaymandate": {
        "type": "object",
        "properties": {
          "BillPayMandateIdentification": {
            "type": "string",
            "description": "Identification of a bill pay mandate",
            "format": "string"
          },
          "BillPayServiceConfiguration": {
            "type": "string",
            "description": "Modaliteis of a bill pay mandate",
            "format": "string"
          }
        },
        "description": "Reference to the applicable mandate for bill pay transactions"
      },
      "billpaymandatefacilityarrangement": {
        "type": "object",
        "properties": {
          "BillPayMandateFacilityArrangement": {
            "type": "string",
            "description": "An arrangement allowing an account to be used as payer account in a bill pay instruction \n\nthis is not the direct bill pay (in SEPA: debit mandate) but the permission to use the account for bill pay m",
            "format": "class"
          }
        },
        "description": "Processing settings governing bill pay transactions"
      },
      "paymentinvolvementtypevalues": {
        "enum": [
          "Payer/Debtor",
          "PayeeBank/CreditorAgent",
          "Payee/Creditor",
          "PayerBank/DebtorAgent",
          "Initiator",
          "PSU",
          "PSP",
          "UltimateDebtor",
          "UltimateCreditor"
        ],
        "type": "string",
        "description": ">\r\n* `Payer/Debtor` - Party who holds a payment account and allows a payment order from that payment account, or, where there is no payment account, a party who gives a payment order.\r\n* `PayeeBank/Cr"
      },
      "paymentservicetypevalues": {
        "enum": [
          "CreditTransferService",
          "StandingOrderService",
          "DirectDebitService",
          "CardPaymentService",
          "WithdrawService",
          "DepositService",
          "OverdraftService",
          "MoneyRemittanceService",
          "StatementService"
        ],
        "type": "string",
        "description": ">\r\n* `CreditTransferService` - A payment service allowing a payer to transfer fund to a beneficiary. (a proposed definition for BIAN BOM adapted from ECB)\r\n* `StandingOrderService` - A credit transfer"
      },
      "paymentmethodtypevalues": {
        "enum": [
          "Cheque",
          "Credittransfer",
          "Directdebit",
          "Transferadvice",
          "Direct",
          "Classical"
        ],
        "type": "string",
        "description": ">\r\n* `Cheque` - Written order to a bank to pay a certain amount of money from one person to another person.\r\n* `Credittransfer` - Transfer of an amount of money in the books of the account servicer.\r\n"
      },
      "paymenttimevalues": {
        "enum": [
          "Paymentondelivery",
          "Endofmonthofdelivery",
          "Endofperiodafterdelivery",
          "Endofperiodafterendofdeliverymonth",
          "Paymentonreceiptofinvoice",
          "Endofperiodafterendofreceiptmonth",
          "Endofperiodafterreceipt",
          "Endofmonthofreceipt",
          "Endofperiodaftermatch",
          "Endofperiodaftershipmentdate",
          "Endofperiodafterpurchaseorderdate",
          "Endofperiodafterbaselineestablishment",
          "Endofperiodafterinvoicedate"
        ],
        "type": "string",
        "description": ">\r\n* `Paymentondelivery` - Code for payment on delivery.\r\n* `Endofmonthofdelivery` - Code for payment at end of month of delivery.\r\n* `Endofperiodafterdelivery` - Code for payment at end of period aft"
      },
      "remittancedeliverymethodtypevalues": {
        "enum": [
          "Fax",
          "Electronicdatainterchange",
          "Uniformresourceidentifier",
          "Email",
          "Post",
          "SMS"
        ],
        "type": "string",
        "description": ">\r\n* `Fax` - Remittance advice information must be faxed.\r\n* `Electronicdatainterchange` - Remittance advice information must be sent through Electronic Data Interchange (EDI).\r\n* `Uniformresourceiden"
      },
      "contactpointtypevalues": {
        "enum": [
          "ElectronicAddress",
          "PostalAddress",
          "PhoneNumber",
          "Socialnetworkaddress"
        ],
        "type": "string",
        "description": ">\r\n* `ElectronicAddress` - Address which is accessed by electronic means. ISO20022\r\n* `PostalAddress` - Information that locates and identifies a specific address. ISO20022\r\n* `PhoneNumber` - Collecti"
      },
      "contactpoint": {
        "type": "object",
        "properties": {
          "ContactPointType": {
            "$ref": "#/components/schemas/contactpointtypevalues"
          }
        },
        "description": ""
      },
      "paymentarrangement": {
        "type": "object",
        "properties": {
          "ServiceType": {
            "$ref": "#/components/schemas/paymentservicetypevalues"
          },
          "PaymentDate": {
            "$ref": "#/components/schemas/paymentdatetime"
          },
          "PaymentPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "PaymentPurpose": {
            "$ref": "#/components/schemas/paymentpurposevalues"
          },
          "PaymentAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "PaymentMethod": {
            "$ref": "#/components/schemas/paymentmethodtypevalues"
          },
          "PaymentType": {
            "$ref": "#/components/schemas/paymenttypevalues"
          },
          "PaymentTime": {
            "$ref": "#/components/schemas/paymenttimevalues"
          },
          "RemittanceDeliveryMethod": {
            "$ref": "#/components/schemas/remittancedeliverymethodtypevalues"
          },
          "RemittanceLocation": {
            "$ref": "#/components/schemas/contactpoint"
          }
        },
        "description": "Configuration setting for various payment transaction types"
      },
      "frequencytypevalues": {
        "enum": [
          "Annual",
          "Monthly",
          "Quarterly",
          "Semiannual",
          "Weekly",
          "Daily",
          "Adhoc",
          "Intraday",
          "Overnight",
          "Tendays",
          "Fortnightly",
          "Triggeredbymovement",
          "Never",
          "Rate",
          "Oncreditevent",
          "Upfront",
          "Onexpiry",
          "Hourly"
        ],
        "type": "string",
        "description": ">\r\n* `Annual` - Event takes place every year or once a year.\r\n* `Monthly` - Event takes place every month or once a month.\r\n* `Quarterly` - Event takes place every three months or four times a year.\r\n"
      },
      "directdebitfrequencyvalues": {
        "enum": [
          "Annual",
          "Monthly",
          "Quarterly",
          "Weekly",
          "Daily",
          "Adhoc",
          "Fortnightly",
          "Hourly",
          "Half-Yearly"
        ],
        "type": "string",
        "description": ">\r\n* `Annual` - Event takes place every year or once a year.\r\n* `Monthly` - Event takes place every month or once a month.\r\n* `Quarterly` - Event takes place every three months or four times a year.\r\n"
      },
      "directdebitmandatearrangement": {
        "type": "object",
        "properties": {
          "FinalCollectionDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "FirstCollectionDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "CollectionAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "MaximumAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "PointIntime": {
            "$ref": "#/components/schemas/frequencytypevalues"
          },
          "ArrangementType": {
            "$ref": "#/components/schemas/arrangementtypevalues"
          },
          "PrenotificationDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "MandateFrequency": {
            "$ref": "#/components/schemas/directdebitfrequencyvalues"
          },
          "PrenotificationIndicator": {
            "$ref": "#/components/schemas/yesnoindicator"
          },
          "PrenotificationThreshold": {
            "type": "string",
            "description": "Specifies the number of days before the direct debit for notifying the debtor (ISO20022)",
            "format": "number"
          }
        },
        "description": "Processing settings governing direct debits"
      },
      "Payment": {
        "type": "object",
        "properties": {
          "PaymentTransactionPaymentPurpose": {
            "$ref": "#/components/schemas/paymentpurposevalues"
          },
          "PaymentTransactionStatus": {
            "$ref": "#/components/schemas/paymenttransactionstatustypevalues"
          },
          "PaymentProcessinngOptionDefinition": {
            "$ref": "#/components/schemas/paymentprocessingarrangementmodality"
          },
          "PaymentType": {
            "$ref": "#/components/schemas/paymenttypevalues"
          },
          "PaymentProcessingOptionSetting": {
            "$ref": "#/components/schemas/paymentprocessingarrangementmodality"
          },
          "PaymentTransactionPaymentMechanism": {
            "$ref": "#/components/schemas/text"
          },
          "PaymentTransactionFeeType": {
            "$ref": "#/components/schemas/feetypevalues"
          },
          "PaymentTransactionBankBranchLocationReference": {
            "$ref": "#/components/schemas/location"
          },
          "PaymentTransactionFeeCharge": {
            "$ref": "#/components/schemas/amount"
          },
          "PaymentTransactionType": {
            "$ref": "#/components/schemas/paymenttypevalues"
          },
          "DirectDebitMandateReference": {
            "$ref": "#/components/schemas/directdebitmandate"
          },
          "PaymentTransactionDateType": {
            "$ref": "#/components/schemas/paymentdatetimetypevalues"
          },
          "BillPayMandateReference": {
            "$ref": "#/components/schemas/billpaymandate"
          },
          "BilPayMandateSettings": {
            "$ref": "#/components/schemas/billpaymandatefacilityarrangement"
          },
          "PaymentTransactionPayeeBankReference": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "PaymentTransactionAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "PaymentSchedule": {
            "$ref": "#/components/schemas/schedule"
          },
          "PaymentInvolvementType": {
            "$ref": "#/components/schemas/paymentinvolvementtypevalues"
          },
          "PaymentDefinition": {
            "$ref": "#/components/schemas/text"
          },
          "PaymentConfiguration": {
            "$ref": "#/components/schemas/paymentarrangement"
          },
          "DirectDebitMandateSettings": {
            "$ref": "#/components/schemas/directdebitmandatearrangement"
          },
          "PaymentInvolvedPartyReference": {
            "$ref": "#/components/schemas/party"
          },
          "PaymentTransactionDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "PaymentTransactionPayeeAccountReference": {
            "$ref": "#/components/schemas/account"
          },
          "PaymentTransactionPayeeReference": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "PaymentTransaction": {
            "$ref": "#/components/schemas/paymenttransaction"
          }
        },
        "description": "The product features/services available with a financical facility"
      },
      "entrydatetypevalues": {
        "enum": [
          "EntryDate",
          "ValueDate"
        ],
        "type": "string",
        "description": ">\r\n* `EntryDate` - \r\n* `ValueDate` - \r\n"
      },
      "entrytypevalues": {
        "type": "object",
        "properties": {
          "Entrytypevalues": {
            "type": "string",
            "description": "",
            "format": "enumeration"
          }
        },
        "description": ""
      },
      "accountentry": {
        "type": "object",
        "properties": {
          "AccountEntryAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "AccountEntryCurrency": {
            "$ref": "#/components/schemas/accountcurrency"
          },
          "AccountEntryPurpose": {
            "$ref": "#/components/schemas/text"
          },
          "AccountEntryDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "AccountEntryStatus": {
            "$ref": "#/components/schemas/status"
          },
          "AccountEntryDateType": {
            "$ref": "#/components/schemas/entrydatetypevalues"
          },
          "AccountEntryType": {
            "$ref": "#/components/schemas/entrytypevalues"
          }
        },
        "description": "Reference to the entry in Position Keeping of the booking to be authorised"
      },
      "BookingAuthorization": {
        "type": "object",
        "properties": {
          "AccountReference": {
            "$ref": "#/components/schemas/account"
          },
          "BookingDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "PositionKeepingReference": {
            "$ref": "#/components/schemas/accountentry"
          },
          "AuthorizationResult": {
            "$ref": "#/components/schemas/text"
          },
          "TransactionPriorityNumber": {
            "type": "string",
            "description": "Priority number of the payment transaction for use in determining the available balance",
            "format": "number"
          },
          "AuthorizationRejectionReason": {
            "$ref": "#/components/schemas/text"
          },
          "ValueDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "BookingAmount": {
            "$ref": "#/components/schemas/amount"
          }
        },
        "description": "The product features/services available with a financical facility"
      },
      "AccountStatement": {
        "type": "object",
        "description": "The product features/services available with a financical facility"
      },
      "rate": {
        "type": "object",
        "properties": {
          "RateValue": {
            "$ref": "#/components/schemas/value"
          },
          "RateUnit": {
            "$ref": "#/components/schemas/text"
          },
          "RatePeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "RateCapitalUnit": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": "Rate of fee (percentage) to be applied "
      },
      "feecalculationmethodtypevalues": {
        "enum": [
          "Flat",
          "Perunit",
          "Percentage",
          "Rateperbrackets",
          "Ratewithminimumamount",
          "Ratewithmaximumamount",
          "Other",
          "Grossamount",
          "Netamount",
          "Netassetvalueprice"
        ],
        "type": "string",
        "description": ">\r\n* `Flat` - Charge/tax basis is a lump sum.\r\n* `Perunit` - Charges/tax basis is per unit of financial instrument.\r\n* `Percentage` - Charge/tax basis is a percentage.\r\n* `Rateperbrackets` - Charge/ta"
      },
      "chargebearertypevalues": {
        "enum": [
          "Bornebydebtor",
          "Bornebycreditor",
          "Shared",
          "Followingservicelevel"
        ],
        "type": "string",
        "description": ">\r\n* `Bornebydebtor` - All transaction charges are to be borne by the debtor.\r\n* `Bornebycreditor` - All transaction charges are to be borne by the creditor.\r\n* `Shared` - In a credit transfer context"
      },
      "feeapplicationfrequencyvalues": {
        "enum": [
          "Onclosing",
          "Onopening",
          "Chargingperiod",
          "Daily",
          "Peritem",
          "Monthly",
          "Onanniversary",
          "Other",
          "Perhundredpounds",
          "Perhour",
          "Peroccurrence",
          "Persheet",
          "Pertransaction",
          "Pertransactionamount",
          "Pertransactionpercentage",
          "Quarterly",
          "Sixmonthly",
          "Statementmonthly",
          "Weekly",
          "Yearly"
        ],
        "type": "string",
        "description": ">\r\n* `Onclosing` - This fee is triggered on closing of a product\r\n* `Onopening` - This fee is triggered on opening of a product\r\n* `Chargingperiod` - This fee is triggered at the end of each charging "
      },
      "feepaymentmethodtypevalues": {
        "enum": [
          "Cash",
          "Unit"
        ],
        "type": "string",
        "description": ">\r\n* `Cash` - Payment is with cash.\r\n* `Unit` - Units are redeemed to cover payment.\r\n"
      },
      "feecalculationfrequencyvalues": {
        "enum": [
          "Onclosing",
          "Onopening",
          "Chargingperiod",
          "Daily",
          "Peritem",
          "Monthly",
          "Onanniversary",
          "Other",
          "Perhundredpounds",
          "Perhour",
          "Peroccurrence",
          "Persheet",
          "Pertransaction",
          "Pertransactionamount",
          "Pertransactionpercentage",
          "Quarterly",
          "Sixmonthly",
          "Statementmonthly",
          "Weekly",
          "Yearly"
        ],
        "type": "string",
        "description": ">\r\n* `Onclosing` - This fee is triggered on closing of a product\r\n* `Onopening` - This fee is triggered on opening of a product\r\n* `Chargingperiod` - This fee is triggered at the end of each charging "
      },
      "ServiceFee": {
        "type": "object",
        "properties": {
          "FeeCreditAccount": {
            "$ref": "#/components/schemas/account"
          },
          "FeeCalculationMethod": {
            "$ref": "#/components/schemas/servicemodality"
          },
          "FeeRate": {
            "$ref": "#/components/schemas/rate"
          },
          "FeeCalculationMethodType": {
            "$ref": "#/components/schemas/feecalculationmethodtypevalues"
          },
          "ChargeBearerType": {
            "$ref": "#/components/schemas/chargebearertypevalues"
          },
          "ChargeBearerReference": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "FeeApplicationFrequency": {
            "$ref": "#/components/schemas/feeapplicationfrequencyvalues"
          },
          "FeePaymentMethodType": {
            "$ref": "#/components/schemas/feepaymentmethodtypevalues"
          },
          "FeeType": {
            "$ref": "#/components/schemas/feetypevalues"
          },
          "FeeCalculationFrequency": {
            "$ref": "#/components/schemas/feecalculationfrequencyvalues"
          },
          "AccrualFeeAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "FeeApplicationCreditDebitIndicator": {
            "$ref": "#/components/schemas/debitcreditindicatortvalues"
          },
          "FeeApplicationDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "FeeAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "AccruedCreditDebitIndicator": {
            "$ref": "#/components/schemas/debitcreditindicatortvalues"
          },
          "FeeDebitAccount": {
            "$ref": "#/components/schemas/account"
          },
          "FeeApplicationAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "FeePaymentMethod": {
            "$ref": "#/components/schemas/servicemodality"
          }
        },
        "description": "The product features/services available with a financical facility"
      },
      "interestcalculationmethodtypevalues": {
        "enum": [
          "Simple",
          "Compounding"
        ],
        "type": "string",
        "description": ">\r\n* `Simple` - Calculation method by which interest is calculated on the original principal only. Accumulated interest from prior periods is not used in calculations for the following periods. (ISO20"
      },
      "interestratetypevalues": {
        "enum": [
          "Fixed",
          "Forfeit",
          "Variable",
          "Scheduled",
          "Unscheduled",
          "Discount",
          "Fixedrateunderlyingexposureforlife",
          "Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating",
          "Fixedwithfutureperiodicresets",
          "Floatinglinkedtoindex",
          "Floatingrateunderlyingexposureforlife",
          "Floatingrateunderlyingexposurewithcap",
          "Floatingrateunderlyingexposurewithfloor",
          "Floatingrateunderlyingexposurewithfloorandcap",
          "Modular",
          "Obligorswapped",
          "Other",
          "Swicthoptionality"
        ],
        "type": "string",
        "description": ">\r\n* `Fixed` - Rate is fixed.\r\n* `Forfeit` - No specific repurchase rate applies to the transaction Repo, only a forfeit.\r\n* `Variable` - Rate is variable.\r\n* `Scheduled` - Rate of the scheduled payme"
      },
      "interesttypevalues": {
        "enum": [
          "Fixed",
          "Floatingratenote",
          "Dualbasis",
          "Index",
          "Discounted",
          "Zerocoupon",
          "Exinterest",
          "Cuminterest"
        ],
        "type": "string",
        "description": ">\r\n* `Fixed` - Indicates that the type of interest is fixed.\r\n* `Floatingratenote` - Indicates that the type of interest is a floating rate note.\r\n* `Dualbasis` - Indicates that the type of interest i"
      },
      "feeplantypevalues": {
        "enum": [
          "StandardFeePlan",
          "FinalFeePlan"
        ],
        "type": "string",
        "description": ">\r\n* `StandardFeePlan` - \r\n* `FinalFeePlan` - \r\n"
      },
      "goaltypevalues": {
        "enum": [
          "Short-TermGoal",
          "Long-TermGoal",
          "BusinessGoal",
          "PerformanceGoal",
          "FinancialGoal",
          "OutcomeGoal",
          "SMARTGoal"
        ],
        "type": "string",
        "description": ">\r\n* `Short-TermGoal` - \r\n* `Long-TermGoal` - \r\n* `BusinessGoal` - \r\n* `PerformanceGoal` - \r\n* `FinancialGoal` - \r\n* `OutcomeGoal` - \r\n* `SMARTGoal` - \r\n"
      },
      "goaldatetimetypevalues": {
        "enum": [
          "SettingDate",
          "PlanningDate",
          "StartDate",
          "ReviewDate",
          "CompletionDate"
        ],
        "type": "string",
        "description": ">\r\n* `SettingDate` - \r\n* `PlanningDate` - \r\n* `StartDate` - \r\n* `ReviewDate` - \r\n* `CompletionDate` - \r\n"
      },
      "goaldatetime": {
        "type": "object",
        "properties": {
          "GoalDateAndTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "GoalDateAndTimeType": {
            "$ref": "#/components/schemas/goaldatetimetypevalues"
          }
        },
        "description": "The key dates and times of Goal like Setting Data, Planning Date, Start Date, Review Date, Completion Date."
      },
      "goalstatustypevalues": {
        "enum": [
          "Setting",
          "Planning",
          "Execution",
          "MonitoringAndEvaluation",
          "CompletionOrAchievement",
          "MaintenanceOrSustainment",
          "ClosureOrRenewal"
        ],
        "type": "string",
        "description": ">\r\n* `Setting` - \r\n* `Planning` - \r\n* `Execution` - \r\n* `MonitoringAndEvaluation` - \r\n* `CompletionOrAchievement` - \r\n* `MaintenanceOrSustainment` - \r\n* `ClosureOrRenewal` - \r\n"
      },
      "goalstatus": {
        "type": "object",
        "properties": {
          "GoalStatus": {
            "$ref": "#/components/schemas/status"
          },
          "GoalStatusType": {
            "$ref": "#/components/schemas/goalstatustypevalues"
          }
        },
        "description": "The lifecycle status of Goal like Goal Setting, Planning, Execution, Monitoring and Evaluation, Completion or Achievement, Maintenance or Sustainment, Closure or Renewal"
      },
      "goal": {
        "type": "object",
        "properties": {
          "GoalType": {
            "$ref": "#/components/schemas/goaltypevalues"
          },
          "GoalDefinition": {
            "$ref": "#/components/schemas/text"
          },
          "GoalName": {
            "$ref": "#/components/schemas/name"
          },
          "GoalDateAndTime": {
            "$ref": "#/components/schemas/goaldatetime"
          },
          "GoalStatus": {
            "$ref": "#/components/schemas/goalstatus"
          }
        },
        "description": ""
      },
      "budgettypevalues": {
        "enum": [
          "OperatingBudget",
          "FinancialBudget",
          "ResourceBudget"
        ],
        "type": "string",
        "description": ">\r\n* `OperatingBudget` - \r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n"
      },
      "budgettype": {
        "type": "object",
        "properties": {
          "BudgetTypeName": {
            "$ref": "#/components/schemas/name"
          },
          "BudgetType": {
            "$ref": "#/components/schemas/budgettypevalues"
          }
        },
        "description": "A Classification value that specifies the type of Budget"
      },
      "budgetarrangement": {
        "type": "object",
        "properties": {
          "BudgetType": {
            "$ref": "#/components/schemas/budgettype"
          },
          "BudgetAmount": {
            "$ref": "#/components/schemas/amount"
          }
        },
        "description": "An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictiona"
      },
      "plannedaction": {
        "type": "object",
        "properties": {
          "PlannedAction": {
            "type": "string",
            "description": "An action that is arranged in a plan for doing or achieving something ",
            "format": "class"
          }
        },
        "description": "An action that is arranged in a plan for doing or achieving something "
      },
      "plantypevalues": {
        "enum": [
          "AdministrativePlan",
          "ManagementPlan",
          "StratgyPlan",
          "FinancialPlan",
          "DevelopmentPlan"
        ],
        "type": "string",
        "description": ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n* `DevelopmentPlan` - \r\n"
      },
      "plan": {
        "type": "object",
        "properties": {
          "PlanGoal": {
            "$ref": "#/components/schemas/goal"
          },
          "PlanBudget": {
            "$ref": "#/components/schemas/budgetarrangement"
          },
          "PlannedAction": {
            "$ref": "#/components/schemas/plannedaction"
          },
          "PlanType": {
            "$ref": "#/components/schemas/plantypevalues"
          },
          "PlanValidityPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "PlanDescription": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": ""
      },
      "feeplan": {
        "type": "object",
        "properties": {
          "FeePlanName": {
            "$ref": "#/components/schemas/name"
          },
          "FeePlanType": {
            "$ref": "#/components/schemas/feeplantypevalues"
          },
          "FeePlan": {
            "$ref": "#/components/schemas/plan"
          }
        },
        "description": "An arranged FeeRatePlan\n"
      },
      "adjustmentdirectiontypevalues": {
        "enum": [
          "Added",
          "Substracted"
        ],
        "type": "string",
        "description": ">\r\n* `Added` - Adjustment amount must be added to the total amount.\r\n* `Substracted` - Adjustment amount must be substracted from the total amount.\r\n"
      },
      "feearrangement": {
        "type": "object",
        "properties": {
          "FeeType": {
            "$ref": "#/components/schemas/feetypevalues"
          },
          "FeeAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "FeeRate": {
            "$ref": "#/components/schemas/rate"
          },
          "FeeEffectivePeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "FeeDueDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "FeePlan": {
            "$ref": "#/components/schemas/feeplan"
          },
          "FeeCreditDebitIndicator": {
            "$ref": "#/components/schemas/debitcreditindicatortvalues"
          },
          "FeeReason": {
            "$ref": "#/components/schemas/text"
          },
          "FeeDirection": {
            "$ref": "#/components/schemas/adjustmentdirectiontypevalues"
          },
          "FeeBearerType": {
            "$ref": "#/components/schemas/chargebearertypevalues"
          }
        },
        "description": "Specifies the charges on interest."
      },
      "frequency": {
        "type": "object",
        "properties": {
          "FrequencyCode": {
            "$ref": "#/components/schemas/frequencytypevalues"
          },
          "FrequencyName": {
            "$ref": "#/components/schemas/name"
          },
          "FrequencyDefinition": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": "Specifies the frequency of an interest payment."
      },
      "taxtypevalues": {
        "enum": [
          "Valueaddedtaxofzerorate",
          "Provincial",
          "Nationaltax",
          "Statetax",
          "Withholdingtax",
          "Capitalgaintax",
          "Interimprofittax",
          "Stampduty",
          "Wealthtax",
          "Inheritancetax",
          "Solidaritysurcharge",
          "Taxcredit",
          "Equalisation",
          "Gifttax",
          "Consumptiontax",
          "Alternativeminimumtax",
          "Localtax",
          "Nationalfederaltax",
          "Paymentlevytax",
          "Stockexchangetax",
          "Transactiontax",
          "Transfertax",
          "Valueaddedtax",
          "Localbrokercommission",
          "Executingbrokercommission",
          "Eutaxretention",
          "Aktiengewinn1",
          "Aktiengewinn2",
          "Zwischengewinn",
          "Customstax",
          "Other",
          "Mietgewinn",
          "Germanlocaltax3",
          "Germanlocaltax4",
          "Germanlocaltax2",
          "Withholdingofforeigntax",
          "Withholdingoflocaltax",
          "Capitallosscredit"
        ],
        "type": "string",
        "description": ">\r\n* `Valueaddedtaxofzerorate` - Tax for which a zero rate applies.\r\n* `Provincial` - Tax is a provincial tax.\r\n* `Nationaltax` - Tax is a national tax.\r\n* `Statetax` - Tax is a state tax.\r\n* `Withhol"
      },
      "ratetypevalues": {
        "enum": [
          "Fixed",
          "Forfeit",
          "Variable",
          "Open",
          "Unknown",
          "Nilpayment",
          "Additionaltax",
          "Charges",
          "Cashinlieuofsecurities",
          "Gross",
          "Cashincentive",
          "Net",
          "Sollication",
          "Stampduty",
          "Stockexchangetax",
          "Withholdingtax",
          "Transfertax",
          "Transactiontax",
          "Taxdeferred",
          "Taxfeeamount",
          "Withholdingofforeigntax",
          "Withholdingoflocaltax",
          "Imputed",
          "Precompte",
          "Onetiertax",
          "Localtax",
          "Scheduled",
          "Unscheduled",
          "Anyandall"
        ],
        "type": "string",
        "description": ">\r\n* `Fixed` - Rate is fixed.\r\n* `Forfeit` - No specific repurchase rate applies to the transaction Repo, only a forfeit.\r\n* `Variable` - Rate is variable.\r\n* `Open` - Rate has not been established.\r\n"
      },
      "condition": {
        "type": "object",
        "properties": {
          "ConditionIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "ConditionName": {
            "$ref": "#/components/schemas/name"
          },
          "ConditionValidityPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "ConditionDateAndTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "ConditionStatus": {
            "$ref": "#/components/schemas/status"
          }
        },
        "description": "Specifies taxation conditions."
      },
      "taxidentificationtypevalues": {
        "enum": [
          "TaxIdentificationNumber",
          "GlobalIntermediaryIdentificationNumber"
        ],
        "type": "string",
        "description": ">\r\n* `TaxIdentificationNumber` - \r\n* `GlobalIntermediaryIdentificationNumber` - \r\n"
      },
      "taxidentification": {
        "type": "object",
        "properties": {
          "TaxIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "TaxIdentificationType": {
            "$ref": "#/components/schemas/taxidentificationtypevalues"
          }
        },
        "description": ""
      },
      "rateplantypevalues": {
        "enum": [
          "StandardRatePlan",
          "AdjustmentRatePlan",
          "FinalRatePlan"
        ],
        "type": "string",
        "description": ">\r\n* `StandardRatePlan` - \r\n* `AdjustmentRatePlan` - \r\n* `FinalRatePlan` - \r\n"
      },
      "rateplan": {
        "type": "object",
        "properties": {
          "RatePlanName": {
            "type": "string",
            "description": "",
            "format": "string"
          },
          "RatePlanType": {
            "$ref": "#/components/schemas/rateplantypevalues"
          },
          "RatePlan": {
            "type": "string",
            "description": "",
            "format": "string"
          }
        },
        "description": "An arranged InterestRatePlan"
      },
      "interestarrangement": {
        "type": "object",
        "properties": {
          "InterestType": {
            "$ref": "#/components/schemas/interesttypevalues"
          },
          "InterestRate": {
            "$ref": "#/components/schemas/rate"
          },
          "InterestDefinition": {
            "$ref": "#/components/schemas/text"
          },
          "InterestRateType": {
            "$ref": "#/components/schemas/interestratetypevalues"
          },
          "InterestPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "InterestRatePlan": {
            "$ref": "#/components/schemas/rateplan"
          },
          "InterestSchedule": {
            "$ref": "#/components/schemas/schedule"
          }
        },
        "description": "Interest for which a tax is specified."
      },
      "productidentificationtypevalues": {
        "enum": [
          "ISINCode",
          "PackageCode",
          "Buyersitemnumber",
          "Commercialdescriptioncodename",
          "EAN",
          "Harmonizedtariffcodename",
          "Manufacturersitemnumber",
          "Modelnumber",
          "Partnumber",
          "Quotacategory",
          "Stylenumber",
          "Suppliersitemnumber",
          "Universalproductcode"
        ],
        "type": "string",
        "description": ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercia"
      },
      "productidentification": {
        "type": "object",
        "properties": {
          "ProductIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "ProductIdentificationType": {
            "$ref": "#/components/schemas/productidentificationtypevalues"
          }
        },
        "description": "The identifier of product e.g. ISIN Code."
      },
      "bankingproducttypevalues": {
        "enum": [
          "LoanProduct",
          "CurrentAccountProduct",
          "SavingAccountProduct",
          "BrokeredProduct",
          "TermDepositProduct"
        ],
        "type": "string",
        "description": ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
      },
      "productstatustypevalues": {
        "enum": [
          "Initiated",
          "Announced",
          "Sold",
          "Obsolete",
          "Active"
        ],
        "type": "string",
        "description": ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
      },
      "productstatus": {
        "type": "object",
        "properties": {
          "ProductStatus": {
            "$ref": "#/components/schemas/status"
          },
          "ProductStatusType": {
            "$ref": "#/components/schemas/productstatustypevalues"
          }
        },
        "description": "Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn)."
      },
      "bankingproduct": {
        "type": "object",
        "properties": {
          "ProductIdentification": {
            "$ref": "#/components/schemas/productidentification"
          },
          "ProductType": {
            "$ref": "#/components/schemas/bankingproducttypevalues"
          },
          "ProductLifecycleStatus": {
            "$ref": "#/components/schemas/productstatus"
          },
          "ProductPriority": {
            "$ref": "#/components/schemas/text"
          },
          "ProductDescription": {
            "$ref": "#/components/schemas/text"
          },
          "ProductVersion": {
            "$ref": "#/components/schemas/text"
          },
          "ProductName": {
            "$ref": "#/components/schemas/name"
          }
        },
        "description": "Product on which a tax is applied."
      },
      "truefalseindicatorvalues": {
        "enum": [
          "1",
          "0"
        ],
        "type": "string",
        "description": ">\r\n* `1` - \r\n* `0` - \r\n"
      },
      "financialdocumenttypevalues": {
        "enum": [
          "Meteredserviceinvoice",
          "Creditnoterelatedtofinancialadjustment",
          "Debitnoterelatedtofinancialadjustment",
          "Commercialinvoice",
          "Creditnote",
          "Debitnote",
          "Hireinvoice",
          "Selfbilledinvoice",
          "Remittanceadvicemessage",
          "Relatedpaymentinstruction",
          "Commercialcontract",
          "Foreignexchangedealreference",
          "Statementofaccount",
          "Dispatchadvice",
          "Purchaseorder",
          "Structuredcommunicationreference",
          "Billoflading",
          "Voucher",
          "Accountreceivableopenitem",
          "Tradeservicesutilitytransaction",
          "Cashierreceipt",
          "Customerreceipt",
          "Journal",
          "Salereceipt"
        ],
        "type": "string",
        "description": ">\r\n* `Meteredserviceinvoice` - Document is an invoice claiming payment for the supply of metered services, for example gas or electricity supplied to a fixed meter.\r\n* `Creditnoterelatedtofinancialadj"
      },
      "documentdatetimetypevalues": {
        "enum": [
          "CreationDate",
          "CapturingDate",
          "VersionDate",
          "ValueDate",
          "IssueDate"
        ],
        "type": "string",
        "description": ">\r\n* `CreationDate` - \r\n* `CapturingDate` - \r\n* `VersionDate` - \r\n* `ValueDate` - \r\n* `IssueDate` - \r\n"
      },
      "document": {
        "type": "object",
        "properties": {
          "DocumentIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "DocumentVersion": {
            "type": "string",
            "description": "",
            "format": "number"
          },
          "DocumentType": {
            "$ref": "#/components/schemas/financialdocumenttypevalues"
          },
          "DocumentStatus": {
            "$ref": "#/components/schemas/status"
          },
          "DocumentDateTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "DocumentName": {
            "$ref": "#/components/schemas/name"
          },
          "DocumentDateTimeType": {
            "$ref": "#/components/schemas/documentdatetimetypevalues"
          },
          "DocumentPurpose": {
            "$ref": "#/components/schemas/text"
          },
          "DocumentFormat": {
            "$ref": "#/components/schemas/text"
          },
          "DocumentSubject": {
            "$ref": "#/components/schemas/text"
          },
          "DocumentDescription": {
            "$ref": "#/components/schemas/text"
          },
          "DocumentValidityPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          }
        },
        "description": ""
      },
      "taxarrangement": {
        "type": "object",
        "properties": {
          "TaxType": {
            "$ref": "#/components/schemas/taxtypevalues"
          },
          "TaxAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "TaxRate": {
            "$ref": "#/components/schemas/rate"
          },
          "TaxRateType": {
            "$ref": "#/components/schemas/ratetypevalues"
          },
          "PlaceOfTaxation": {
            "$ref": "#/components/schemas/location"
          },
          "TaxableParty": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "TaxAccount": {
            "$ref": "#/components/schemas/account"
          },
          "TaxationCondition": {
            "$ref": "#/components/schemas/condition"
          },
          "TaxCurrency": {
            "$ref": "#/components/schemas/currencycode"
          },
          "TaxDueDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "TaxCalculationDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "TaxPayer": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "TaxRecipient": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "TaxIdentification": {
            "$ref": "#/components/schemas/taxidentification"
          },
          "TaxationPlace": {
            "$ref": "#/components/schemas/location"
          },
          "TaxCharge": {
            "$ref": "#/components/schemas/feearrangement"
          },
          "TaxInterest": {
            "$ref": "#/components/schemas/interestarrangement"
          },
          "TaxMethod": {
            "$ref": "#/components/schemas/text"
          },
          "TaxProduct": {
            "$ref": "#/components/schemas/bankingproduct"
          },
          "TaxExemption": {
            "$ref": "#/components/schemas/truefalseindicatorvalues"
          },
          "TaxExemptionReason": {
            "$ref": "#/components/schemas/text"
          },
          "TaxDateAndTime": {
            "$ref": "#/components/schemas/datetime"
          },
          "TaxCertification": {
            "$ref": "#/components/schemas/document"
          },
          "TaxPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          }
        },
        "description": "Specifies the tax on interest"
      },
      "interesttransactiontypevalues": {
        "enum": [
          "InterestAllocationTransaction",
          "InterestPaymentTransaction",
          "InterestAdjustmentTransaction"
        ],
        "type": "string",
        "description": ">\r\n* `InterestAllocationTransaction` - \r\n* `InterestPaymentTransaction` - \r\n* `InterestAdjustmentTransaction` - \r\n"
      },
      "interesttransaction": {
        "type": "object",
        "properties": {
          "InterestTransactionAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "InterestTransactionDescription": {
            "$ref": "#/components/schemas/text"
          },
          "InterestTransactionType": {
            "$ref": "#/components/schemas/interesttransactiontypevalues"
          },
          "AppliedInterestRate": {
            "$ref": "#/components/schemas/rate"
          },
          "AppliedInteretType": {
            "$ref": "#/components/schemas/interesttypevalues"
          },
          "InterestCreditDebitIndicator": {
            "$ref": "#/components/schemas/debitcreditindicatortvalues"
          }
        },
        "description": "A record of applied interest"
      },
      "Interest": {
        "type": "object",
        "properties": {
          "InterestCalculationMethod": {
            "$ref": "#/components/schemas/interestcalculationmethodtypevalues"
          },
          "InterestRateType": {
            "$ref": "#/components/schemas/interestratetypevalues"
          },
          "InterestRateApplicationSchedule": {
            "$ref": "#/components/schemas/schedule"
          },
          "InterestDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "InterestRate": {
            "$ref": "#/components/schemas/rate"
          },
          "InterestAccrualAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "InterestCalculationDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "InterestType": {
            "$ref": "#/components/schemas/interesttypevalues"
          },
          "InterestPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "InterestAccrualDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "InterestFee": {
            "$ref": "#/components/schemas/feearrangement"
          },
          "InterestPaymentFrequency": {
            "$ref": "#/components/schemas/frequency"
          },
          "InterestTax": {
            "$ref": "#/components/schemas/taxarrangement"
          },
          "InterestAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "InterestCreditDebitIndicator": {
            "$ref": "#/components/schemas/debitcreditindicatortvalues"
          },
          "InterestCalculationFrequency": {
            "$ref": "#/components/schemas/frequency"
          },
          "InterestAccrualType": {
            "$ref": "#/components/schemas/interesttypevalues"
          },
          "InterestTransaction": {
            "$ref": "#/components/schemas/interesttransaction"
          }
        },
        "description": "The product features/services available with a financical facility"
      },
      "savingsaccountagreement": {
        "type": "object",
        "properties": {
          "SavingsAccountAgreementIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "SavingsAccountAgreementCurrency": {
            "$ref": "#/components/schemas/accountcurrency"
          },
          "SavingsAccountAgreementTaxRegime": {
            "$ref": "#/components/schemas/taxarrangement"
          },
          "CustomerCommentary": {
            "$ref": "#/components/schemas/text"
          },
          "JoinedAccountHolderIndicator": {
            "type": "string",
            "description": "An indicator specifying if the Agreement has more than one account holder of not.\nThis indicator is a derived attribute. If there is more than one agreement involvement of type account holder, the ind",
            "format": "boolean"
          },
          "StandingOrderIndicator": {
            "$ref": "#/components/schemas/yesnoindicator"
          }
        },
        "description": "Reference to the savings account product instance |CashAccountContract (https://www.iso20022.org/standardsrepository/type/CashAccountContract)|Standard|ISO20022 BM ()"
      },
      "servicearrangementmodality": {
        "type": "object",
        "properties": {
          "ServiceArrangementModalityType": {
            "$ref": "#/components/schemas/modalitytypevalues"
          }
        },
        "description": ""
      },
      "partyobligationorentitlement": {
        "type": "object",
        "properties": {
          "ObligationOrEntitlementSubject": {
            "$ref": "#/components/schemas/subject"
          },
          "ObligationOrEntitlementType": {
            "$ref": "#/components/schemas/arrangementtypevalues"
          },
          "ObligationOrEntitlementModality": {
            "$ref": "#/components/schemas/servicearrangementmodality"
          },
          "ObligationOrEntitlementDefinition": {
            "$ref": "#/components/schemas/text"
          }
        },
        "description": "Description of the role, obligations or entitlements of the associated party ||\r\n|"
      },
      "accountrestrictionstatustypevalues": {
        "enum": [
          "Active",
          "Inactive"
        ],
        "type": "string",
        "description": ">\r\n* `Active` - Status of the restriction is active.\r\n* `Inactive` - Status of the restriction is inactive.\r\n"
      },
      "accountrestrictionstatus": {
        "type": "object",
        "properties": {
          "AccountRestrictionStatus": {
            "$ref": "#/components/schemas/status"
          },
          "AccountRestrictionStatusType": {
            "$ref": "#/components/schemas/accountrestrictionstatustypevalues"
          }
        },
        "description": "Status of the restriction."
      },
      "accountrestriction": {
        "type": "object",
        "properties": {
          "AccountRestrictionIdentifier": {
            "$ref": "#/components/schemas/identifier"
          },
          "AccountRestrictionType": {
            "$ref": "#/components/schemas/text"
          },
          "AccountRestrictionDescription": {
            "$ref": "#/components/schemas/text"
          },
          "AccountRestrictionValidityPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "AccountRestrictionStatus": {
            "$ref": "#/components/schemas/accountrestrictionstatus"
          },
          "AccountRestrictionRegulator": {
            "$ref": "#/components/schemas/involvedparty"
          }
        },
        "description": "The setting for the restriction option AccountRestriction_x000D_\n|AccountRestriction (https://www.iso20022.org/standardsrepository/type/AccountRestriction)|Standard|ISO20022 BM  ()"
      },
      "accountinvolvementtypevalues": {
        "enum": [
          "PartyIsOwnerOfAccount",
          "PartyIsServicerOfAccount",
          "PartyIsPayeeOnAccount",
          "PartyIsPrimaryOwnerOfAccount",
          "PartyIsCo-OwnerOfAccount",
          "PartyIsJointOwnerOfAccount"
        ],
        "type": "string",
        "description": "The type of association (e.g. guarantor, co-signer) AccountPartyRole |AccountPartyRole  (https://www.iso20022.org/standardsrepository/type/AccountPartyRole)|Standard|ISO20022 BM ()"
      },
      "accountinvolvement": {
        "type": "object",
        "properties": {
          "AccountInvolvementType": {
            "$ref": "#/components/schemas/accountinvolvementtypevalues"
          },
          "AccountReference": {
            "$ref": "#/components/schemas/account"
          },
          "PartyReference": {
            "$ref": "#/components/schemas/party"
          }
        },
        "description": "Definition of the associations to the account Account Party Role_x000D_\n|Account Party Role (https://www.iso20022.org/standardsrepository/type/AccountPartyRole)|Standard|ISO20022 BM ()"
      },
      "account_accountrelationshiptypevalues": {
        "enum": [
          "AccountIsParentAccountForAccount",
          "AccountIsSubAccountForAccount",
          "AccountIsLinkedToAccount"
        ],
        "type": "string",
        "description": "The type and purpose for the link ||\r\n|"
      },
      "limittypevalues": {
        "enum": [
          "Multilateral",
          "Bilateral",
          "Netbilateral",
          "Indirectbilateral",
          "Global",
          "Mandatorybilateral",
          "Discretionarybilateral",
          "Directdebit",
          "Singlecustomerdirectdebit",
          "Singlefinancialinstitutiondirectdebit",
          "Totaldailycustomerdirectdebit",
          "Totaldailyfinancialinstitutiondirectdebit",
          "Autocollateralisation",
          "Unsecuredcredit",
          "Externalguarantee"
        ],
        "type": "string",
        "description": "The type of limit  LimitTypeCode|LimitTypeCode (https://www.iso20022.org/standardsrepository/type/LimitTypeCode)|Standard|ISO20022 BM ()"
      },
      "limitstatustypevalues": {
        "enum": [
          "Enabled",
          "Disabled",
          "Deleted",
          "Requested"
        ],
        "type": "string",
        "description": ">\r\n* `Enabled` - Limit is currently in effect.\r\n* `Disabled` - Limit is not currently in effect.\r\n* `Deleted` - Limit has been deleted or suspended.\r\n* `Requested` - Limit has been asked for and is no"
      },
      "limitstatus": {
        "type": "object",
        "properties": {
          "LimitStatus": {
            "$ref": "#/components/schemas/status"
          },
          "LimitStatusType": {
            "$ref": "#/components/schemas/limitstatustypevalues"
          }
        },
        "description": "Current status of the limit."
      },
      "limitarrangement": {
        "type": "object",
        "properties": {
          "LimitType": {
            "$ref": "#/components/schemas/limittypevalues"
          },
          "LimitCurrency": {
            "$ref": "#/components/schemas/currencycode"
          },
          "LimitValidityPeriod": {
            "$ref": "#/components/schemas/datetimeperiod"
          },
          "LimitAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "LimitStatus": {
            "$ref": "#/components/schemas/limitstatus"
          },
          "LimitRate": {
            "$ref": "#/components/schemas/rate"
          },
          "LimitFrequency": {
            "$ref": "#/components/schemas/frequency"
          },
          "LimitIdentification": {
            "$ref": "#/components/schemas/identifier"
          },
          "LimitStartDatetime": {
            "$ref": "#/components/schemas/datetime"
          },
          "LimitCreditDebitIndicator": {
            "$ref": "#/components/schemas/debitcreditindicatortvalues"
          },
          "LimitAmountType": {
            "$ref": "#/components/schemas/amounttypevalues"
          }
        },
        "description": "The associated limit settings and rules Limit|Limit (https://www.iso20022.org/standardsrepository/type/Limit)|Standard|ISO20022 (https://www.iso20022.org/)"
      },
      "SavingsAccountFacility": {
        "type": "object",
        "properties": {
          "ProductInstanceReference": {
            "$ref": "#/components/schemas/savingsaccountagreement"
          },
          "SavingsAccountNumber": {
            "$ref": "#/components/schemas/accountidentification"
          },
          "CustomerReference": {
            "$ref": "#/components/schemas/involvedparty"
          },
          "BankBranchLocationReference": {
            "$ref": "#/components/schemas/branch"
          },
          "AccountType": {
            "$ref": "#/components/schemas/accounttypevalues"
          },
          "AccountCurrency": {
            "$ref": "#/components/schemas/accountcurrency"
          },
          "TaxReference": {
            "$ref": "#/components/schemas/identifier"
          },
          "EntitlementOptionDefinition": {
            "$ref": "#/components/schemas/partyobligationorentitlement"
          },
          "EntitlementOptionSetting": {
            "$ref": "#/components/schemas/partyobligationorentitlement"
          },
          "RestrictionOptionDefinition": {
            "$ref": "#/components/schemas/accountrestriction"
          },
          "RestrictionOptionSetting": {
            "$ref": "#/components/schemas/accountrestriction"
          },
          "Associations": {
            "$ref": "#/components/schemas/accountinvolvement"
          },
          "AssociationType": {
            "$ref": "#/components/schemas/accountinvolvementtypevalues"
          },
          "AssociationObligationEntitlement": {
            "$ref": "#/components/schemas/partyobligationorentitlement"
          },
          "AssociationReference": {
            "$ref": "#/components/schemas/party"
          },
          "LinkedAccounts": {
            "$ref": "#/components/schemas/account"
          },
          "LinkType": {
            "$ref": "#/components/schemas/account_accountrelationshiptypevalues"
          },
          "AccountDetails": {
            "$ref": "#/components/schemas/account"
          },
          "AccountDateType": {
            "$ref": "#/components/schemas/accountdatetimetypevalues"
          },
          "AccountDate": {
            "$ref": "#/components/schemas/datetime"
          },
          "LimitValue": {
            "$ref": "#/components/schemas/value"
          },
          "LimitType": {
            "$ref": "#/components/schemas/limittypevalues"
          },
          "LimitSettings": {
            "$ref": "#/components/schemas/limitarrangement"
          }
        },
        "description": "Fulfill any scheduled and ad-hoc obligations under a service arrangement, most typically for a financial product or facility within Savings Account. "
      }
    },
    "responses": {
      "SavingsAccountFacility": {
        "description": "SavingsAccountFacility",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SavingsAccountFacility"
            }
          }
        }
      },
      "Interest": {
        "description": "Interest",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Interest"
            }
          }
        }
      },
      "ServiceFee": {
        "description": "ServiceFee",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceFee"
            }
          }
        }
      },
      "Sweep": {
        "description": "Sweep",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Sweep"
            }
          }
        }
      },
      "Withdrawal": {
        "description": "Withdrawal",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Withdrawal"
            }
          }
        }
      },
      "Payment": {
        "description": "Payment",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      },
      "IssuedDevice": {
        "description": "IssuedDevice",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IssuedDevice"
            }
          }
        }
      },
      "BookingAuthorization": {
        "description": "BookingAuthorization",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BookingAuthorization"
            }
          }
        }
      },
      "AmountBlock": {
        "description": "AmountBlock",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AmountBlock"
            }
          }
        }
      },
      "Deposit": {
        "description": "Deposit",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Deposit"
            }
          }
        }
      }
    },
    "parameters": {
      "savingsaccountid": {
        "name": "savingsaccountid",
        "in": "path",
        "required": true,
        "style": "simple",
        "schema": {
          "type": "string"
        }
      },
      "interestid": {
        "name": "interestid",
        "in": "path",
        "required": true,
        "style": "simple",
        "schema": {
          "type": "string"
        }
      },
      "servicefeeid": {
        "name": "servicefeeid",
        "in": "path",
        "required": true,
        "style": "simple",
        "schema": {
          "type": "string"
        }
      },
      "sweepid": {
        "name": "sweepid",
        "in": "path",
        "required": true,
        "style": "simple",
        "schema": {
          "type": "string"
        }
      },
      "withdrawalid": {
        "name": "withdrawalid",
        "in": "path",
        "required": true,
        "style": "simple",
        "schema": {
          "type": "string"
        }
      },
      "paymentid": {
        "name": "paymentid",
        "in": "path",
        "required": true,
        "style": "simple",
        "schema": {
          "type": "string"
        }
      },
      "issueddeviceid": {
        "name": "issueddeviceid",
        "in": "path",
        "required": true,
        "style": "simple",
        "schema": {
          "type": "string"
        }
      },
      "bookingauthorizationid": {
        "name": "bookingauthorizationid",
        "in": "path",
        "required": true,
        "style": "simple",
        "schema": {
          "type": "string"
        }
      },
      "amountblockid": {
        "name": "amountblockid",
        "in": "path",
        "required": true,
        "style": "simple",
        "schema": {
          "type": "string"
        }
      },
      "depositid": {
        "name": "depositid",
        "in": "path",
        "required": true,
        "style": "simple",
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "SavingsAccountFacility": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SavingsAccountFacility"
            }
          }
        },
        "required": true
      },
      "ServiceFee": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceFee"
            }
          }
        },
        "required": true
      },
      "Sweep": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Sweep"
            }
          }
        },
        "required": true
      },
      "Withdrawal": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Withdrawal"
            }
          }
        },
        "required": true
      },
      "Payment": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        },
        "required": true
      },
      "IssuedDevice": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IssuedDevice"
            }
          }
        },
        "required": true
      },
      "Interest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Interest"
            }
          }
        },
        "required": true
      },
      "BookingAuthorization": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BookingAuthorization"
            }
          }
        },
        "required": true
      },
      "AmountBlock": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AmountBlock"
            }
          }
        },
        "required": true
      },
      "Deposit": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Deposit"
            }
          }
        },
        "required": true
      }
    }
  }
}